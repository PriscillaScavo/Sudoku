{"ast":null,"code":"import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\";\nimport { nanoid } from \"nanoid\";\nconst [sudoku, setSudoku] = React.useState(generateSudokuGrid());\nexport function generateSudokuGrid() {\n  const grid = [];\n  data.map(sudoku => {\n    sudoku.schema.map(row => {\n      row.row.map(tile => {\n        grid.push({\n          number: tile.n,\n          r: sudoku.schema.indexOf(row),\n          c: row.row.indexOf(tile),\n          id: nanoid(),\n          isNotInitValue: tile.n === \"\" ? true : false,\n          note: []\n        });\n      });\n    });\n  });\n  return grid;\n}\nexport function allNumbers() {\n  const numbers = [];\n\n  for (let i = 0; i <= 9; i++) {\n    numbers.push(createNumber(i));\n  }\n\n  return numbers;\n}\n\nfunction createNumber(i) {\n  return {\n    value: i === 0 ? \"\" : i,\n    isSelected: false,\n    id: nanoid(),\n    count: sudoku.filter(s => s.number === i).length\n  };\n}","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/SudokuApi.js"],"names":["React","Fragment","Tile","data","nanoid","sudoku","setSudoku","useState","generateSudokuGrid","grid","map","schema","row","tile","push","number","n","r","indexOf","c","id","isNotInitValue","note","allNumbers","numbers","i","createNumber","value","isSelected","count","filter","s","length"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,KAAK,CAACO,QAAN,CAAeC,kBAAkB,EAAjC,CAA5B;AACA,OAAO,SAASA,kBAAT,GAA8B;AACjC,QAAMC,IAAI,GAAG,EAAb;AACIN,EAAAA,IAAI,CAACO,GAAL,CAASL,MAAM,IAAI;AAEPA,IAAAA,MAAM,CAACM,MAAP,CAAcD,GAAd,CAAkBE,GAAG,IAAG;AAEhBA,MAAAA,GAAG,CAACA,GAAJ,CAAQF,GAAR,CAAYG,IAAI,IAAG;AACfJ,QAAAA,IAAI,CAACK,IAAL,CAAU;AACFC,UAAAA,MAAM,EAAEF,IAAI,CAACG,CADX;AAEFC,UAAAA,CAAC,EAAEZ,MAAM,CAACM,MAAP,CAAcO,OAAd,CAAsBN,GAAtB,CAFD;AAGFO,UAAAA,CAAC,EAAEP,GAAG,CAACA,GAAJ,CAAQM,OAAR,CAAgBL,IAAhB,CAHD;AAIFO,UAAAA,EAAE,EAAEhB,MAAM,EAJR;AAKFiB,UAAAA,cAAc,EAAGR,IAAI,CAACG,CAAL,KAAW,EAAZ,GAAiB,IAAjB,GAAwB,KALtC;AAMFM,UAAAA,IAAI,EAAE;AANJ,SAAV;AAQH,OATD,CADJ;AAYH,KAbD,CADJ;AAgBH,GAjBL;AAkBF,SAAOb,IAAP;AACH;AAEH,OAAO,SAASc,UAAT,GAAsB;AACzB,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,IAAAA,OAAO,CAACV,IAAR,CAAaY,YAAY,CAACD,CAAD,CAAzB;AACH;;AACD,SAAOD,OAAP;AACH;;AAED,SAASE,YAAT,CAAsBD,CAAtB,EAAyB;AACrB,SAAO;AACHE,IAAAA,KAAK,EAAIF,CAAC,KAAK,CAAP,GAAW,EAAX,GAAeA,CADpB;AAEHG,IAAAA,UAAU,EAAE,KAFT;AAGHR,IAAAA,EAAE,EAAEhB,MAAM,EAHP;AAIHyB,IAAAA,KAAK,EAAExB,MAAM,CAACyB,MAAP,CAAeC,CAAD,IAAOA,CAAC,CAAChB,MAAF,KAAaU,CAAlC,EAAqCO;AAJzC,GAAP;AAMC","sourcesContent":["import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\"\nimport {nanoid} from \"nanoid\"\n\nconst [sudoku, setSudoku] = React.useState(generateSudokuGrid())\nexport function generateSudokuGrid() {\n    const grid = []\n        data.map(sudoku => {\n                (\n                    sudoku.schema.map(row =>{\n                        (\n                            row.row.map(tile =>{\n                                grid.push({\n                                        number: tile.n ,\n                                        r: sudoku.schema.indexOf(row),\n                                        c: row.row.indexOf(tile),\n                                        id: nanoid(),\n                                        isNotInitValue: (tile.n === \"\")? true : false,\n                                        note: [],\n                                        })\n                            })\n                        )\n                    })\n                )\n            })\n      return grid\n  }\n\nexport function allNumbers() {\n    const numbers = []\n    for (let i = 0; i <= 9; i++) {\n        numbers.push(createNumber(i))\n    }\n    return numbers\n}\n\nfunction createNumber(i) {\n    return {\n        value: ((i === 0)? \"\": i),\n        isSelected: false,\n        id: nanoid(),\n        count: sudoku.filter((s) => s.number === i).length\n        }\n    }"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/sudoku/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const [numbers, setNumbers] = React.useState(allNumbers());\n  const [squares, setSquares] = React.useState(generateSquares());\n  const [columns, setColumns] = React.useState(generateColumns());\n  const [selectedNum, setSelectedNum] = React.useState();\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      value: n.value,\n      isSelected: n.isSelected,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => selectNumber(n.id, n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this);\n  });\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isInitValue: s.isInitValue,\n      insertNum: () => insertNum(s.id, s.number)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n\n  function generateSudokuGrid() {\n    const grid = [];\n    data.map(sudoku => {\n      sudoku.schema.map(row => {\n        row.row.map(tile => {\n          grid.push({\n            number: tile.n,\n            r: sudoku.schema.indexOf(row),\n            c: row.row.indexOf(tile),\n            id: nanoid(),\n            isInitValue: tile.n === \"\" ? false : true\n          });\n        });\n      });\n    });\n    return grid;\n  }\n\n  function insertNum(id, value) {\n    const isInitValue = sudoku.filter(s => s.id === id)[0].isInitValue;\n    const isOnBound = numbers.filter(n => n.value === selectedNum)[0].count < 9;\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      return s.id === id && !s.isInitValue && isOnBound ? { ...s,\n        number: selectedNum\n      } : s;\n    }));\n\n    if (value === \"\") {\n      setNumbers(oldNumber => oldNumber.map(n => {\n        return n.value === selectedNum && n.count < 9 ? { ...n,\n          count: n.count + 1\n        } : n;\n      }));\n    } else {\n      setNumbers(oldNumber => oldNumber.map(n => {\n        if (value === selectedNum || isInitValue) return n;else if (n.value === selectedNum && n.count < 9) return { ...n,\n          count: n.count + 1\n        };else if (n.value === value && n.count > 0) return { ...n,\n          count: n.count - 1\n        };else return n;\n      }));\n    }\n  }\n\n  function allNumbers() {\n    const numbers = [];\n\n    for (let i = 0; i < 10; i++) {\n      numbers.push(createNumber(i));\n    }\n\n    return numbers;\n  }\n\n  function createNumber(i) {\n    return {\n      value: i === 0 ? \"\" : i,\n      isSelected: false,\n      id: nanoid(),\n      count: sudoku.filter(s => s.number === i).length\n    };\n  }\n\n  function selectNumber(id, value) {\n    setSelectedNum(value);\n    setNumbers(oldNumber => oldNumber.map(n => {\n      return n.id === id ? { ...n,\n        isSelected: true\n      } : { ...n,\n        isSelected: false\n      };\n    }));\n  }\n\n  function generateSquares() {\n    const sq = [];\n\n    for (let j = 0; j < 61; j = j + 27) {\n      for (let i = j; i < j + 8; i = i + 3) {\n        sq.push(sudoku.slice(i, i + 3).concat(sudoku.slice(i + 9, i + 12)).concat(sudoku.slice(i + 18, i + 21)));\n      }\n    }\n\n    return sq;\n  }\n\n  function generateColumns() {\n    const columns = [];\n\n    for (let i = 0; i < 9; i++) {\n      const column = [];\n\n      for (let j = 0; j < 9; j++) {\n        columns[i].push(sudoku[i][j]);\n      }\n    }\n\n    return columns;\n  }\n\n  console.log(columns);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"GYypj9nBiZhjyjO1nPJmfkG8Un0=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/sudoku/src/App.js"],"names":["React","Tile","Number","data","nanoid","App","sudoku","setSudoku","useState","generateSudokuGrid","numbers","setNumbers","allNumbers","squares","setSquares","generateSquares","columns","setColumns","generateColumns","selectedNum","setSelectedNum","rowNumber","map","n","value","isSelected","id","count","selectNumber","sudokuGrid","s","number","r","c","isInitValue","insertNum","grid","schema","row","tile","push","indexOf","filter","isOnBound","oldSudoku","oldNumber","i","createNumber","length","sq","j","slice","concat","column","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const [numbers, setNumbers] = React.useState(allNumbers())\n    const [squares, setSquares] = React.useState(generateSquares())\n    const [columns, setColumns] = React.useState(generateColumns())\n    const [selectedNum, setSelectedNum] = React.useState()\n\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                value={n.value}\n                isSelected={n.isSelected}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => selectNumber(n.id, n.value)}\n                />)\n    })\n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                number = {s.number}\n                r = {s.r}\n                c = {s.c}\n                isInitValue={s.isInitValue}\n                insertNum = {() => insertNum((s.id), (s.number))}\n            />)\n            }\n    )\n\n\n\n    function generateSudokuGrid() {\n      const grid = []\n          data.map(sudoku => {\n                  (\n                      sudoku.schema.map(row =>{\n                          (\n                              row.row.map(tile =>{\n                                  grid.push({\n                                          number: tile.n ,\n                                          r: sudoku.schema.indexOf(row),\n                                          c: row.row.indexOf(tile),\n                                          id: nanoid(),\n                                          isInitValue: (tile.n === \"\")? false : true\n                                          })\n                              })\n                          )\n                      })\n                  )\n              })\n        return grid\n    }\n    function insertNum(id, value) {\n            const isInitValue = sudoku.filter(s => s.id === id)[0].isInitValue\n            const isOnBound = numbers.filter(n => n.value === selectedNum)[0].count < 9\n\n            setSudoku(oldSudoku => oldSudoku.map(s => {\n                return s.id === id && !s.isInitValue && isOnBound?\n                    {...s, number: selectedNum} : s\n            }))\n        if (value === \"\"){\n            setNumbers(oldNumber => oldNumber.map(n => {\n                return n.value === selectedNum  && n.count < 9?\n                    {...n, count: (n.count + 1)} : n\n          }))}\n        else{\n        setNumbers(oldNumber => oldNumber.map(n => {\n                        if (value === selectedNum || isInitValue)\n                            return n\n                       else if(n.value === selectedNum && n.count < 9)\n                         return {...n, count: (n.count + 1)}\n                       else if (n.value === value && n.count > 0)\n                        return {...n, count: (n.count - 1)}\n                        else\n                        return n\n                  }))\n        }\n        }\n\n    function allNumbers() {\n            const numbers = []\n            for (let i = 0; i < 10; i++) {\n                numbers.push(createNumber(i))\n            }\n            return numbers\n        }\n    function createNumber(i) {\n            return {\n                value: ((i === 0)? \"\": i),\n                isSelected: false,\n                id: nanoid(),\n                count: sudoku.filter((s) => s.number === i).length\n                }\n            }\n    function selectNumber(id,value) {\n        setSelectedNum(value)\n        setNumbers(oldNumber => oldNumber.map(n => {\n            return n.id === id ?\n                {...n, isSelected: true} :\n                {...n, isSelected: false}\n        }))\n\n    }\n\n    function generateSquares(){\n        const sq = []\n        for(let j = 0; j < 61; j = j + 27){\n        for(let i = j; i < j + 8; i = i + 3){\n            sq.push ((sudoku.slice(i, i +3).concat\n            (sudoku.slice(i + 9, i + 12))).concat\n            (sudoku.slice(i +18, i + 21)))\n        }\n        }\n        return sq\n    }\n    function generateColumns(){\n        const columns = []\n        for(let i = 0; i < 9; i++){\n            const column = []\n            for(let j = 0; j < 9; j++){\n                columns[i].push(sudoku[i][j])\n            }\n        }\n        return columns;\n    }\n    console.log(columns)\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <h2>{selectedNum}</h2>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useState, useEffect } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tile(props) {\n  _s();\n\n  const [notesList, setNotesList] = useState(createNotesList());\n\n  function createNotesList() {\n    if (JSON.parse(localStorage.getItem(\"notes\" + props.id))) {\n      var list = JSON.parse(localStorage.getItem(\"notes\" + props.id));\n      return list.map(oldList => oldList.value);\n    } else return [];\n  }\n\n  function notesHandle() {\n    if (!props.note || props.note === '') {\n      setNotesList(() => []);\n      localStorage.setItem(\"notes\" + props.id, JSON.stringify([]));\n    } else {\n      setNotesList(oldList => [...new Set([...oldList, props.note])]);\n      var notes = notesList.map(note => {\n        return {\n          value: note\n        };\n      });\n      localStorage.setItem(\"notes\" + props.id, JSON.stringify(notes));\n    }\n\n    return notes;\n  }\n\n  let name;\n\n  if ((props.c === 2 || props.c === 5) && (props.r === 2 || props.r === 5)) {\n    name = \"singleTileThickCR\";\n  } else if (props.c === 2 || props.c === 5) {\n    name = \"singleTileThickC\";\n  } else if (props.r === 2 || props.r === 5) {\n    name = \"singleTileThickR\";\n  } else {\n    name = \"singleTile\";\n  }\n\n  const highligh = {\n    backgroundColor: props.highligh ? \"#59E391\" : \"white\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: name,\n    onClick: props.fillTile,\n    children: [!props.notesMode && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"number\",\n      children: [\" \", props.value === 0 ? \"\" : props.value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.notesMode && /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"notes\",\n        children: [\" \", notesHandle, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tile, \"yofdKrnQW7SZu6n0s9Ien+qjGFM=\");\n\n_c = Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js"],"names":["React","Fragment","useContext","useState","useEffect","nanoid","Tile","props","notesList","setNotesList","createNotesList","JSON","parse","localStorage","getItem","id","list","map","oldList","value","notesHandle","note","setItem","stringify","Set","notes","name","c","r","highligh","backgroundColor","fillTile","notesMode"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,SAA/C,QAAiE,OAAjE;AACA,SAAQC,MAAR,QAAqB,QAArB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA;;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAACO,eAAe,EAAhB,CAA1C;;AAEA,WAASA,eAAT,GAA2B;AACvB,QAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAAUP,KAAK,CAACQ,EAArC,CAAX,CAAH,EAAwD;AACpD,UAAIC,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAAUP,KAAK,CAACQ,EAArC,CAAX,CAAX;AACA,aAAOC,IAAI,CAACC,GAAL,CAASC,OAAO,IAAIA,OAAO,CAACC,KAA5B,CAAP;AACH,KAHD,MAIK,OAAO,EAAP;AACR;;AAED,WAASC,WAAT,GAAsB;AAClB,QAAG,CAACb,KAAK,CAACc,IAAP,IAAed,KAAK,CAACc,IAAN,KAAe,EAAjC,EAAoC;AAChCZ,MAAAA,YAAY,CAAC,MAAM,EAAP,CAAZ;AACAI,MAAAA,YAAY,CAACS,OAAb,CAAqB,UAAUf,KAAK,CAACQ,EAArC,EAAyCJ,IAAI,CAACY,SAAL,CAAe,EAAf,CAAzC;AACH,KAHD,MAII;AACAd,MAAAA,YAAY,CAACS,OAAO,IAAI,CAAC,GAAG,IAAIM,GAAJ,CAAQ,CAAC,GAAGN,OAAJ,EAAaX,KAAK,CAACc,IAAnB,CAAR,CAAJ,CAAZ,CAAZ;AACA,UAAII,KAAK,GAAGjB,SAAS,CAACS,GAAV,CAAcI,IAAI,IAAI;AAAC,eAAO;AAACF,UAAAA,KAAK,EAAEE;AAAR,SAAP;AAAqB,OAA5C,CAAZ;AACAR,MAAAA,YAAY,CAACS,OAAb,CAAqB,UAAUf,KAAK,CAACQ,EAArC,EAAyCJ,IAAI,CAACY,SAAL,CAAeE,KAAf,CAAzC;AACH;;AACD,WAAOA,KAAP;AACH;;AAEA,MAAIC,IAAJ;;AACG,MAAI,CAACnB,KAAK,CAACoB,CAAN,KAAU,CAAV,IAAepB,KAAK,CAACoB,CAAN,KAAU,CAA1B,MAAiCpB,KAAK,CAACqB,CAAN,KAAU,CAAV,IAAerB,KAAK,CAACqB,CAAN,KAAU,CAA1D,CAAJ,EAAkE;AAC9DF,IAAAA,IAAI,GAAG,mBAAP;AACH,GAFD,MAEO,IAAInB,KAAK,CAACoB,CAAN,KAAU,CAAV,IAAepB,KAAK,CAACoB,CAAN,KAAU,CAA7B,EAAgC;AACnCD,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA,IAAInB,KAAK,CAACqB,CAAN,KAAU,CAAV,IAAerB,KAAK,CAACqB,CAAN,KAAU,CAA7B,EAA+B;AAClCF,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA;AACHA,IAAAA,IAAI,GAAG,YAAP;AACH;;AACL,QAAMG,QAAQ,GAAG;AACbC,IAAAA,eAAe,EAAEvB,KAAK,CAACsB,QAAN,GAAgB,SAAhB,GAA4B;AADhC,GAAjB;AAIA,sBACI;AAAQ,IAAA,SAAS,EAAGH,IAApB;AAA0B,IAAA,OAAO,EAAInB,KAAK,CAACwB,QAA3C;AAAA,eACK,CAACxB,KAAK,CAACyB,SAAP,iBAAoB;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,sBAA0BzB,KAAK,CAACY,KAAN,KAAgB,CAAhB,GAAoB,EAApB,GAAwBZ,KAAK,CAACY,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,YADzB,eAEI;AAAA,gBACCZ,KAAK,CAACyB,SAAN,iBAAmB;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA,wBAAwBZ,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA9CuBd,I;;KAAAA,I","sourcesContent":["import React,{ Fragment, useContext, useState, useEffect }  from 'react';\nimport {nanoid} from \"nanoid\"\n\nexport default function Tile(props){\n    const [notesList, setNotesList] = useState(createNotesList())\n\n    function createNotesList (){\n        if(JSON.parse(localStorage.getItem(\"notes\" + props.id))){\n            var list = JSON.parse(localStorage.getItem(\"notes\" + props.id))\n            return list.map(oldList => oldList.value)\n        }\n        else return []\n    }\n   \n    function notesHandle(){\n        if(!props.note || props.note === ''){\n            setNotesList(() => [])\n            localStorage.setItem(\"notes\" + props.id, JSON.stringify([]))\n        }\n        else{\n            setNotesList(oldList => [...new Set([...oldList, props.note])])\n            var notes = notesList.map(note => {return {value: note}})\n            localStorage.setItem(\"notes\" + props.id, JSON.stringify(notes))\n        }\n        return notes;\n    }\n    \n     let name\n        if ((props.c===2 || props.c===5) && (props.r===2 || props.r===5)) {\n            name = \"singleTileThickCR\"\n        } else if (props.c===2 || props.c===5) {\n            name = \"singleTileThickC\"\n        } else if (props.r===2 || props.r===5){\n            name = \"singleTileThickR\"\n        } else {\n            name = \"singleTile\"\n        }\n    const highligh = {\n        backgroundColor: props.highligh? \"#59E391\" : \"white\"\n    }\n\n    return(\n        <button className= {name} onClick = {props.fillTile} >\n            {!props.notesMode && <h2 className=\"number\" > {props.value === 0 ? \"\": props.value} </h2>}\n            <div>\n            {props.notesMode && <h4 className=\"notes\"> {notesHandle} </h4>}\n            </div>\n         </button>\n    )\n}"]},"metadata":{},"sourceType":"module"}
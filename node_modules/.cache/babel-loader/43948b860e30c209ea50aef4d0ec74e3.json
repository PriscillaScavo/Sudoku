{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/sudoku/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [numbers, setNumbers] = React.useState(allNumbers());\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const [squares, setSquares] = React.useState(generateSquares());\n  const [selectedNum, setSelectedNum] = React.useState();\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      value: n.value,\n      isSelected: n.isSelected,\n      id: n.id,\n      selectNumber: () => selectNumber(n.id, n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 16\n    }, this);\n  });\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isInitValue: s.isInitValue,\n      insertNum: () => insertNum(s.id)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  });\n  const square = squares.map(s => {\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \" ciao\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 20\n    }, this);\n  });\n\n  function generateSudokuGrid() {\n    const grid = [];\n    data.map(sudoku => {\n      sudoku.schema.map(row => {\n        row.row.map(tile => {\n          grid.push({\n            number: tile.n,\n            r: sudoku.schema.indexOf(row),\n            c: row.row.indexOf(tile),\n            id: nanoid(),\n            isInitValue: tile.n === \"\" ? false : true\n          });\n        });\n      });\n    });\n    return grid;\n  }\n\n  function insertNum(id) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      return s.id === id && !s.isInitValue ? { ...s,\n        number: selectedNum\n      } : s;\n    }));\n  }\n\n  function allNumbers() {\n    const numbers = [];\n\n    for (let i = 1; i < 10; i++) {\n      numbers.push(createNumber(i));\n    }\n\n    return numbers;\n  }\n\n  function createNumber(i) {\n    return {\n      value: i,\n      isSelected: false,\n      id: nanoid()\n    };\n  }\n\n  function selectNumber(id, value) {\n    setSelectedNum(value);\n    setNumbers(oldNumber => oldNumber.map(n => {\n      return n.id === id ? { ...n,\n        isSelected: true\n      } : { ...n,\n        isSelected: false\n      };\n    }));\n  }\n\n  function generateSquares() {\n    const squares = [];\n\n    for (let i = 0; i < 81; i = i + 9) {\n      squares.push(sudoku.slice(i, i + 2).concat(sudoku.slice(i + 9, i + 11)).concat(sudoku.slice(i + 18, i + 20)));\n    }\n\n    return squares;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), square, /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"5m7c/eBjSkcscRuaco2NowgD4lM=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/sudoku/src/App.js"],"names":["React","Tile","Number","data","nanoid","App","numbers","setNumbers","useState","allNumbers","sudoku","setSudoku","generateSudokuGrid","squares","setSquares","generateSquares","selectedNum","setSelectedNum","rowNumber","map","n","value","isSelected","id","selectNumber","sudokuGrid","s","number","r","c","isInitValue","insertNum","square","grid","schema","row","tile","push","indexOf","oldSudoku","i","createNumber","oldNumber","slice","concat"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n    const [numbers, setNumbers] = React.useState(allNumbers())\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const [squares, setSquares] = React.useState(generateSquares())\n    const [selectedNum, setSelectedNum] = React.useState()\n\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                value={n.value}\n                isSelected={n.isSelected}\n                id={n.id}\n                selectNumber= {() => selectNumber(n.id, n.value)}\n                />)\n    })\n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                number = {s.number}\n                r = {s.r}\n                c = {s.c}\n                isInitValue={s.isInitValue}\n                insertNum = {() => insertNum(s.id)}\n            />)\n            }\n    )\n       const square = squares.map(s =>{\n                return(\n                   <h2> ciao</h2>\n                )\n                }\n          )\n\n    function generateSudokuGrid() {\n      const grid = []\n          data.map(sudoku => {\n                  (\n                      sudoku.schema.map(row =>{\n                          (\n                              row.row.map(tile =>{\n                                  (\n                                  grid.push({\n                                          number: tile.n,\n                                          r: sudoku.schema.indexOf(row),\n                                          c: row.row.indexOf(tile),\n                                          id: nanoid(),\n                                          isInitValue: (tile.n === \"\")? false : true\n                                          }))\n                              })\n                          )\n                      })\n                  )\n              })\n        return grid\n    }\n     function insertNum(id) {\n\n            setSudoku(oldSudoku => oldSudoku.map(s => {\n                return s.id === id && !s.isInitValue ?\n                    {...s, number: selectedNum} : s\n            }))\n        }\n\n    function allNumbers() {\n            const numbers = []\n            for (let i = 1; i < 10; i++) {\n                numbers.push(createNumber(i))\n            }\n            return numbers\n        }\n    function createNumber(i) {\n            return {\n                value: i,\n                isSelected: false,\n                id: nanoid()\n                }\n            }\n    function selectNumber(id,value) {\n        setSelectedNum(value)\n        setNumbers(oldNumber => oldNumber.map(n => {\n            return n.id === id ?\n                {...n, isSelected: true} :\n                {...n, isSelected: false}\n        }))\n\n    }\n\n    function generateSquares(){\n        const squares = []\n        for(let i = 0; i < 81; i = i + 9){\n            squares.push ((sudoku.slice(i, i +2).concat\n            (sudoku.slice(i + 9, i + 11))).concat\n            (sudoku.slice(i +18, i + 20)))\n        }\n        return squares\n    }\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            {square}\n            <h2>{selectedNum}</h2>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
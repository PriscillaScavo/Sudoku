{"ast":null,"code":"import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\";\nimport { nanoid } from \"nanoid\";\nexport function generateSudokuGrid() {\n  const grid = [];\n  data.map(sudoku => {\n    sudoku.schema.map(row => {\n      row.row.map(tile => {\n        grid.push({\n          value: tile.n,\n          r: sudoku.schema.indexOf(row),\n          c: row.row.indexOf(tile),\n          id: nanoid(),\n          isNotInitValue: tile.n === 0 ? true : false,\n          note: new Set()\n        });\n      });\n    });\n  });\n  return grid;\n}\nexport function allNumbers() {\n  const numbers = [];\n\n  for (let i = 0; i <= 9; i++) {\n    numbers.push(createNumber(i));\n  }\n\n  return numbers;\n}\n\nfunction createNumber(i) {\n  return {\n    value: i,\n    id: nanoid(),\n    count: 0\n  };\n}\n\nfunction generateRows() {\n  const rows = [];\n\n  for (let i = 0; i < 81; i = i + 9) {\n    rows.push(sudoku.slice(i, i + 9));\n  }\n\n  return rows;\n}\n\nfunction generateColumns() {\n  const columns = [];\n\n  for (let i = 0; i < 9; i++) {\n    columns.push([]);\n\n    for (let j = 0; j < 9; j++) {\n      columns[i].push(rows[j][i]);\n    }\n  }\n\n  return columns;\n}","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/SudokuApi.js"],"names":["React","Fragment","Tile","data","nanoid","generateSudokuGrid","grid","map","sudoku","schema","row","tile","push","value","n","r","indexOf","c","id","isNotInitValue","note","Set","allNumbers","numbers","i","createNumber","count","generateRows","rows","slice","generateColumns","columns","j"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjC,QAAMC,IAAI,GAAG,EAAb;AACIH,EAAAA,IAAI,CAACI,GAAL,CAASC,MAAM,IAAI;AAEPA,IAAAA,MAAM,CAACC,MAAP,CAAcF,GAAd,CAAkBG,GAAG,IAAG;AAEhBA,MAAAA,GAAG,CAACA,GAAJ,CAAQH,GAAR,CAAYI,IAAI,IAAG;AACfL,QAAAA,IAAI,CAACM,IAAL,CAAU;AACFC,UAAAA,KAAK,EAAEF,IAAI,CAACG,CADV;AAEFC,UAAAA,CAAC,EAAEP,MAAM,CAACC,MAAP,CAAcO,OAAd,CAAsBN,GAAtB,CAFD;AAGFO,UAAAA,CAAC,EAAEP,GAAG,CAACA,GAAJ,CAAQM,OAAR,CAAgBL,IAAhB,CAHD;AAIFO,UAAAA,EAAE,EAAEd,MAAM,EAJR;AAKFe,UAAAA,cAAc,EAAGR,IAAI,CAACG,CAAL,KAAW,CAAZ,GAAgB,IAAhB,GAAuB,KALrC;AAMFM,UAAAA,IAAI,EAAE,IAAIC,GAAJ;AANJ,SAAV;AAQH,OATD,CADJ;AAYH,KAbD,CADJ;AAgBH,GAjBL;AAkBF,SAAOf,IAAP;AACH;AAEH,OAAO,SAASgB,UAAT,GAAsB;AACzB,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,IAAAA,OAAO,CAACX,IAAR,CAAaa,YAAY,CAACD,CAAD,CAAzB;AACH;;AACD,SAAOD,OAAP;AACH;;AAED,SAASE,YAAT,CAAsBD,CAAtB,EAAyB;AACrB,SAAO;AACHX,IAAAA,KAAK,EAAEW,CADJ;AAEHN,IAAAA,EAAE,EAAEd,MAAM,EAFP;AAGHsB,IAAAA,KAAK,EAAE;AAHJ,GAAP;AAKC;;AAED,SAASC,YAAT,GAAuB;AACnB,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAI,IAAIJ,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,GAAGA,CAAC,GAAG,CAA/B,EAAiC;AAC7BI,IAAAA,IAAI,CAAChB,IAAL,CAAUJ,MAAM,CAACqB,KAAP,CAAaL,CAAb,EAAgBA,CAAC,GAAG,CAApB,CAAV;AACH;;AACD,SAAOI,IAAP;AACH;;AACD,SAASE,eAAT,GAA0B;AACtB,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAI,IAAIP,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtBO,IAAAA,OAAO,CAACnB,IAAR,CAAa,EAAb;;AACA,SAAI,IAAIoB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACrBD,MAAAA,OAAO,CAACP,CAAD,CAAR,CAAaZ,IAAb,CAAkBgB,IAAI,CAACI,CAAD,CAAJ,CAAQR,CAAR,CAAlB;AACH;AACJ;;AACD,SAAOO,OAAP;AACH","sourcesContent":["import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\"\nimport {nanoid} from \"nanoid\"\n\nexport function generateSudokuGrid() {\n    const grid = []\n        data.map(sudoku => {\n                (\n                    sudoku.schema.map(row =>{\n                        (\n                            row.row.map(tile =>{\n                                grid.push({\n                                        value: tile.n ,\n                                        r: sudoku.schema.indexOf(row),\n                                        c: row.row.indexOf(tile),\n                                        id: nanoid(),\n                                        isNotInitValue: (tile.n === 0)? true : false,\n                                        note: new Set()\n                                        })\n                            })\n                        )\n                    })\n                )\n            })\n      return grid\n  }\n\nexport function allNumbers() {\n    const numbers = []\n    for (let i = 0; i <= 9; i++) {\n        numbers.push(createNumber(i))\n    }\n    return numbers\n}\n\nfunction createNumber(i) {\n    return {\n        value: i,\n        id: nanoid(),\n        count: 0\n        }\n    }\n\n    function generateRows(){\n        const rows = []\n        for(let i = 0; i < 81; i = i + 9){\n            rows.push(sudoku.slice(i, i + 9 ))\n        }\n        return rows;\n    }\n    function generateColumns(){\n        const columns = []\n        for(let i = 0; i < 9; i++){\n            columns.push([])\n            for(let j = 0; j < 9; j++){\n                (columns[i]).push(rows[j][i])\n            }\n        }\n        return columns;\n    }"]},"metadata":{},"sourceType":"module"}
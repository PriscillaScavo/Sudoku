{"ast":null,"code":"import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\";\nimport { nanoid } from \"nanoid\";\nexport function generateSudokuGrid() {\n  const grid = [];\n  data.map(sudoku => {\n    sudoku.schema.map(row => {\n      row.row.map(tile => {\n        grid.push({\n          value: tile.n,\n          r: sudoku.schema.indexOf(row),\n          c: row.row.indexOf(tile),\n          id: nanoid(),\n          isNotInitValue: tile.n === 0 ? true : false,\n          note: new Set([])\n        });\n      });\n    });\n  });\n  return grid;\n}\nexport function allNumbers() {\n  const numbers = [];\n\n  for (let i = 0; i <= 9; i++) {\n    numbers.push(createNumber(i));\n  }\n\n  return numbers;\n}\n\nfunction createNumber(i) {\n  return {\n    value: i,\n    id: nanoid(),\n    count: null\n  };\n}\n\nfunction generateRows(sudoku) {\n  const rows = [];\n\n  for (let i = 0; i < 81; i = i + 9) {\n    rows.push(sudoku.slice(i, i + 9));\n  }\n\n  return rows;\n}\n\nfunction generateColumns(rows) {\n  const columns = [];\n\n  for (let i = 0; i < 9; i++) {\n    columns.push([]);\n\n    for (let j = 0; j < 9; j++) {\n      columns[i].push(rows[j][i]);\n    }\n  }\n\n  return columns;\n}\n\nfunction generateSquares(sudoku) {\n  const sq = [];\n\n  for (let j = 0; j < 61; j = j + 27) {\n    for (let i = j; i < j + 8; i = i + 3) {\n      sq.push(sudoku.slice(i, i + 3).concat(sudoku.slice(i + 9, i + 12)).concat(sudoku.slice(i + 18, i + 21)));\n    }\n  }\n\n  return sq;\n}\n\nexport function checkWin(sudoku) {\n  const rows = generateRows(sudoku);\n  const squareCheck = checkNine(generateSquares(sudoku));\n  const rowCheck = checkNine(rows);\n  const columnCheck = checkNine(generateColumns(rows));\n\n  if (squareCheck && rowCheck && columnCheck) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction checkNine(arrayCheck) {\n  return arrayCheck.reduce((condition, subArray) => {\n    return checkSubArray(subArray) && condition;\n  }, true);\n}\n\nfunction checkSubArray(subArray) {\n  return subArray.reduce((tot, _ref) => {\n    let {\n      value\n    } = _ref;\n    tot.add(value);\n    return tot;\n  }, new Set()).size === 9;\n}","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/SudokuApi.js"],"names":["React","Fragment","Tile","data","nanoid","generateSudokuGrid","grid","map","sudoku","schema","row","tile","push","value","n","r","indexOf","c","id","isNotInitValue","note","Set","allNumbers","numbers","i","createNumber","count","generateRows","rows","slice","generateColumns","columns","j","generateSquares","sq","concat","checkWin","squareCheck","checkNine","rowCheck","columnCheck","arrayCheck","reduce","condition","subArray","checkSubArray","tot","add","size"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\"\nimport {nanoid} from \"nanoid\"\n\nexport function generateSudokuGrid() {\n    const grid = []\n        data.map(sudoku => {\n                (\n                    sudoku.schema.map(row =>{\n                        (\n                            row.row.map(tile =>{\n                                grid.push({\n                                        value: tile.n ,\n                                        r: sudoku.schema.indexOf(row),\n                                        c: row.row.indexOf(tile),\n                                        id: nanoid(),\n                                        isNotInitValue: (tile.n === 0)? true : false,\n                                        note: new Set([])\n                                        })\n                            })\n                        )\n                    })\n                )\n            })\n      return grid\n  }\n\nexport function allNumbers() {\n    const numbers = []\n    for (let i = 0; i <= 9; i++) {\n        numbers.push(createNumber(i))\n    }\n    return numbers\n}\n\nfunction createNumber(i) {\n    return {\n        value: i,\n        id: nanoid(),\n        count: null\n        }\n    }\n\n    function generateRows(sudoku){\n        const rows = []\n        for(let i = 0; i < 81; i = i + 9){\n            rows.push(sudoku.slice(i, i + 9 ))\n        }\n        return rows;\n    }\n    function generateColumns(rows){\n        const columns = []\n        for(let i = 0; i < 9; i++){\n            columns.push([])\n            for(let j = 0; j < 9; j++){\n                (columns[i]).push(rows[j][i])\n            }\n        }\n        return columns;\n    }\n\n\n    function generateSquares(sudoku){\n        const sq = []\n        for(let j = 0; j < 61; j = j + 27){\n        for(let i = j; i < j + 8; i = i + 3){\n            sq.push ((sudoku.slice(i, i +3).concat\n            (sudoku.slice(i + 9, i + 12))).concat\n            (sudoku.slice(i +18, i + 21)))\n        }\n        }\n        return sq\n    }\n\nexport function checkWin(sudoku) {\n    const rows = generateRows(sudoku)\n    const squareCheck = checkNine(generateSquares(sudoku))\n    const rowCheck = checkNine(rows)\n    const columnCheck = checkNine(generateColumns(rows))\n\n  if(squareCheck && rowCheck && columnCheck){\n      return true\n   }\n   return false\n}\n\nfunction checkNine(arrayCheck){\n    return arrayCheck.reduce((condition, subArray) => {\n        return (checkSubArray(subArray) && condition)\n    }, true)\n}\n\nfunction checkSubArray(subArray){\n    return subArray.reduce((tot, {value}) => {\n        tot.add(value)\n        return tot }, new Set()).size === 9\n\n}"]},"metadata":{},"sourceType":"module"}
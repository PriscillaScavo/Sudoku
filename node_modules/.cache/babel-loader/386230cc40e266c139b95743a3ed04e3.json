{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tile(props) {\n  _s();\n\n  const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\")) || []);\n  let name;\n\n  if ((props.c === 2 || props.c === 5) && (props.r === 2 || props.r === 5)) {\n    name = \"singleTileThickCR\";\n  } else if (props.c === 2 || props.c === 5) {\n    name = \"singleTileThickC\";\n  } else if (props.r === 2 || props.r === 5) {\n    name = \"singleTileThickR\";\n  } else {\n    name = \"singleTile\";\n  }\n\n  const highligh = {\n    backgroundColor: props.highligh ? \"#59E391\" : \"white\"\n  };\n  useEffect(() => {\n    if (props.note === '') setNotes(prevNotes => {});\n    localStorage.setItem(\"notes\", JSON.stringify(selectTile));\n  }, [props.note]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: name,\n    onClick: props.fillTile,\n    children: [!props.notesMode && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"number\",\n      children: [\" \", props.value === 0 ? \"\" : props.value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 34\n    }, this), props.notesMode && /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"notes\",\n      children: [\" \", notes, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tile, \"+izWcQgCAgNQ4C4pH8XnDCFD8QU=\");\n\n_c = Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js"],"names":["React","Fragment","useContext","useState","Tile","props","notes","setNotes","JSON","parse","localStorage","getItem","name","c","r","highligh","backgroundColor","useEffect","note","prevNotes","setItem","stringify","selectTile","fillTile","notesMode","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,QAArC,QAAsD,OAAtD;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACK,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,KAA6C,EAA9C,CAAlC;AACC,MAAIC,IAAJ;;AACG,MAAI,CAACP,KAAK,CAACQ,CAAN,KAAU,CAAV,IAAeR,KAAK,CAACQ,CAAN,KAAU,CAA1B,MAAiCR,KAAK,CAACS,CAAN,KAAU,CAAV,IAAeT,KAAK,CAACS,CAAN,KAAU,CAA1D,CAAJ,EAAkE;AAC9DF,IAAAA,IAAI,GAAG,mBAAP;AACH,GAFD,MAEO,IAAIP,KAAK,CAACQ,CAAN,KAAU,CAAV,IAAeR,KAAK,CAACQ,CAAN,KAAU,CAA7B,EAAgC;AACnCD,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA,IAAIP,KAAK,CAACS,CAAN,KAAU,CAAV,IAAeT,KAAK,CAACS,CAAN,KAAU,CAA7B,EAA+B;AAClCF,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA;AACHA,IAAAA,IAAI,GAAG,YAAP;AACH;;AACL,QAAMG,QAAQ,GAAG;AACbC,IAAAA,eAAe,EAAEX,KAAK,CAACU,QAAN,GAAgB,SAAhB,GAA4B;AADhC,GAAjB;AAIAE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGZ,KAAK,CAACa,IAAN,KAAe,EAAlB,EACAX,QAAQ,CAACY,SAAS,IAAI,CAAE,CAAhB,CAAR;AACAT,IAAAA,YAAY,CAACU,OAAb,CAAqB,OAArB,EAA8BZ,IAAI,CAACa,SAAL,CAAeC,UAAf,CAA9B;AACH,GAJQ,EAIN,CAACjB,KAAK,CAACa,IAAP,CAJM,CAAT;AAOA,sBACI;AAAQ,IAAA,SAAS,EAAGN,IAApB;AAA0B,IAAA,OAAO,EAAIP,KAAK,CAACkB,QAA3C;AAAA,eACK,CAAClB,KAAK,CAACmB,SAAP,iBAAoB;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,sBAA0BnB,KAAK,CAACoB,KAAN,KAAgB,CAAhB,GAAoB,EAApB,GAAwBpB,KAAK,CAACoB,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,YADzB,EAEKpB,KAAK,CAACmB,SAAN,iBAAmB;AAAI,MAAA,SAAS,EAAC,OAAd;AAAA,sBAAwBlB,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GA7BuBF,I;;KAAAA,I","sourcesContent":["import React,{ Fragment, useContext, useState }  from 'react';\n\nexport default function Tile(props){\n    const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\")) || [])\n     let name\n        if ((props.c===2 || props.c===5) && (props.r===2 || props.r===5)) {\n            name = \"singleTileThickCR\"\n        } else if (props.c===2 || props.c===5) {\n            name = \"singleTileThickC\"\n        } else if (props.r===2 || props.r===5){\n            name = \"singleTileThickR\"\n        } else {\n            name = \"singleTile\"\n        }\n    const highligh = {\n        backgroundColor: props.highligh? \"#59E391\" : \"white\"\n    }\n    \n    useEffect(() => {\n        if(props.note === '')\n        setNotes(prevNotes => {})\n        localStorage.setItem(\"notes\", JSON.stringify(selectTile))\n    }, [props.note])\n\n\n    return(\n        <button className= {name} onClick = {props.fillTile} >\n            {!props.notesMode && <h2 className=\"number\" > {props.value === 0 ? \"\": props.value} </h2>}\n            {props.notesMode && <h4 className=\"notes\"> {notes} </h4>}\n         </button>\n    )\n}"]},"metadata":{},"sourceType":"module"}
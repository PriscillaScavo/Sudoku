{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from 'react';\nimport Tile from './Tile';\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\nimport Number from './Number';\nimport { generateSudokuGrid, allNumbers } from './SudokuApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const numbers = allNumbers();\n  const [selectTile, setSelectTile] = React.useState('');\n  const [notesMode, setNotesMode] = React.useState(false);\n  const prevSelectTile = useRef();\n  useEffect(() => {\n    prevSelectTile.current = selectTile;\n  }, [selectTile]);\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      value: s.value,\n      r: s.r,\n      c: s.c,\n      isNotInitValue: s.isNotInitValue,\n      fillTile: () => setSelectTile(s),\n      notesMode: s.notesMode,\n      note: s.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  });\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: n.value,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => fillTile(n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this);\n  });\n\n  function fillTile(value) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      if (s.id === selectTile.id && s.isNotInitValue) {\n        return notesMode ? { ...s,\n          notesMode: notesMode,\n          note: [...s.note, value],\n          value: ''\n        } : { ...s,\n          notesMode: notesMode,\n          value: value,\n          note: []\n        };\n      } else return s;\n    }));\n  }\n\n  function switchNotesMode() {\n    setNotesMode(old => !old);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchNotesMode,\n      children: notesMode ? \"notes\" : \"write\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"UREZPkEIBUTiVJjYBlpBrS+H4vw=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Game.js"],"names":["React","useRef","useEffect","Tile","nanoid","Confetti","Number","generateSudokuGrid","allNumbers","Game","sudoku","setSudoku","useState","numbers","selectTile","setSelectTile","notesMode","setNotesMode","prevSelectTile","current","sudokuGrid","map","s","id","value","r","c","isNotInitValue","note","rowNumber","n","count","fillTile","oldSudoku","switchNotesMode","old"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from 'react';\nimport Tile from './Tile';\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\nimport Number from './Number'\nimport {generateSudokuGrid, allNumbers} from './SudokuApi'\n\nexport default function Game() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const numbers = allNumbers()\n    const [selectTile, setSelectTile] = React.useState('')\n    const [notesMode, setNotesMode] = React.useState(false)\n    const prevSelectTile = useRef()\n    useEffect(() => {\n        prevSelectTile.current = selectTile\n    }, [selectTile])\n\n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                value = {s.value}\n                r = {s.r}\n                c = {s.c}\n                isNotInitValue={s.isNotInitValue}\n                fillTile = {() => setSelectTile(s)}\n                notesMode = {s.notesMode}\n                note = {s.note}\n            />)\n        })\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                number={n.value}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => fillTile(n.value)}\n                />)\n    })\n    function fillTile(value){\n        setSudoku(oldSudoku => oldSudoku.map(s => {\n            if(s.id === selectTile.id && s.isNotInitValue) {\n                return notesMode?\n                {...s, notesMode: notesMode,  note : [...s.note, value], value: ''} :\n                {...s, notesMode: notesMode, value: value, note : []} \n            }\n            else\n                return s\n        }))\n    }\n    \n    function switchNotesMode(){\n        setNotesMode(old => !old)\n    }\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <button onClick={switchNotesMode} >{notesMode ? \"notes\" : \"write\"}</button>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport Tile from './Tile';\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\nimport Number from './Number';\nimport { generateSudokuGrid, allNumbers } from './SudokuApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const [sudoku, setSudoku] = useState(generateSudokuGrid());\n  const [numbers, setNumbers] = useState(allNumbers());\n  const [selectTile, setSelectTile] = useState('');\n  const [notesMode, setNotesMode] = useState(false);\n  const prevSelectTile = useRef({\n    value: '',\n    r: '',\n    c: '',\n    id: '',\n    isNotInitValue: false,\n    note: []\n  });\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      value: s.value,\n      r: s.r,\n      c: s.c,\n      isNotInitValue: s.isNotInitValue,\n      fillTile: () => setSelectTile(s),\n      notesMode: s.notesMode,\n      note: s.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this);\n  });\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: n.value,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => fillTile(n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  });\n  useEffect(() => {\n    prevSelectTile.current = selectTile;\n  }, [selectTile]);\n\n  function editCount(value) {\n    setNumbers(oldNum => {\n      if (oldNum.number === value) {\n        console.log(\"dentro if\");\n        return { ...oldNum,\n          count: oldNum.count++\n        };\n      } else return oldNum.number === prevSelectTile.current.value ? { ...oldNum,\n        count: oldNum.count--\n      } : oldNum;\n    });\n  }\n\n  function fillTile(value) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      if (s.id === selectTile.id && s.isNotInitValue) {\n        return notesMode ? { ...s,\n          notesMode: notesMode,\n          note: [...s.note, value],\n          value: ''\n        } : { ...s,\n          notesMode: notesMode,\n          value: value,\n          note: []\n        };\n      } else return s;\n    }));\n    editCount(value);\n  }\n\n  function switchNotesMode() {\n    setNotesMode(old => !old);\n  }\n\n  console.log(numbers);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: switchNotesMode,\n      children: notesMode ? \"notes\" : \"write\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"yzQfz0xj7SVNMOxs2O8xSGnBfps=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Game.js"],"names":["React","useRef","useEffect","useState","Tile","nanoid","Confetti","Number","generateSudokuGrid","allNumbers","Game","sudoku","setSudoku","numbers","setNumbers","selectTile","setSelectTile","notesMode","setNotesMode","prevSelectTile","value","r","c","id","isNotInitValue","note","sudokuGrid","map","s","rowNumber","n","count","fillTile","current","editCount","oldNum","number","console","log","oldSudoku","switchNotesMode","old"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport Tile from './Tile';\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\nimport Number from './Number'\nimport {generateSudokuGrid, allNumbers} from './SudokuApi'\n\nexport default function Game() {\n    const [sudoku, setSudoku] = useState(generateSudokuGrid())\n    const [numbers, setNumbers] = useState(allNumbers())\n    const [selectTile, setSelectTile] = useState('')\n    const [notesMode, setNotesMode] = useState(false)\n    const prevSelectTile = useRef({\n        value: '',\n        r: '',\n        c: '',\n        id: '',\n        isNotInitValue: false,\n        note: []\n    })\n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                value = {s.value}\n                r = {s.r}\n                c = {s.c}\n                isNotInitValue={s.isNotInitValue}\n                fillTile = {() => setSelectTile(s)}\n                notesMode = {s.notesMode}\n                note = {s.note}\n            />)\n        })\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                number={n.value}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => fillTile(n.value)}\n                />)\n    })\n    \n    useEffect(() => {\n        prevSelectTile.current = selectTile    \n    }, [selectTile])\n    \n    function editCount(value){\n        setNumbers(oldNum => {\n            if (oldNum.number === value){\n                console.log(\"dentro if\")\n                return {...oldNum, count: oldNum.count++}}\n            else return (oldNum.number === prevSelectTile.current.value) ?\n                {...oldNum, count: oldNum.count--} : oldNum\n            }\n        )\n    }\n    function fillTile(value){\n        setSudoku(oldSudoku => oldSudoku.map(s => {\n            if(s.id === selectTile.id && s.isNotInitValue) {\n                return notesMode?\n                {...s, notesMode: notesMode,  note : [...s.note, value], value: ''} :\n                {...s, notesMode: notesMode, value: value, note : []} \n            }\n            else\n                return s\n        }))\n        editCount(value)\n    }\n    \n    function switchNotesMode(){\n        setNotesMode(old => !old)\n    }\n\n\n    console.log(numbers);\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <button onClick={switchNotesMode} >{notesMode ? \"notes\" : \"write\"}</button>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
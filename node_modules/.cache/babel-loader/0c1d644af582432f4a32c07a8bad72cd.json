{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/sudoku/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const [numbers, setNumbers] = React.useState(allNumbers());\n  const [squares, setSquares] = React.useState(generateSquares());\n  const [rows, setRows] = React.useState(generateRows());\n  const [columns, setColumns] = React.useState(generateColumns());\n  const [selectedNum, setSelectedNum] = React.useState();\n  const [notesMode, setNotesMode] = React.useState(false);\n  const [winGame, setWinGame] = React.useState(false);\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      value: n.value,\n      isSelected: n.isSelected,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => selectNumber(n.id, n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 16\n    }, this);\n  });\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isInitValue: s.isInitValue,\n      insertNum: () => tileSelected(s.id, s.number),\n      note: s.note,\n      highligh: s.highligh\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this);\n  });\n  React.useEffect(() => {\n    const allSelected = numbers.every(n => n.count === 9);\n\n    if (allSelected) {\n      const squareCheck = squares.every(sq => {\n        const uniqueSquare = new Set(sq);\n        return uniqueSquare.size() === 9;\n      });\n      const rowCheck = rows.every(row => {\n        const uniqueRow = new Set(row);\n        return uniqueRow.size() === 9;\n      });\n      const columnCheck = columns.every(column => {\n        const uniqueColumn = new Set(column);\n        return uniqueColumn.size() === 9;\n      });\n\n      if (squareCheck && rowCheck && columnCheck) {\n        setWinGame(true);\n        console.log(\"YOU WON\");\n      }\n    }\n  }, [numbers]);\n\n  function generateSudokuGrid() {\n    const grid = [];\n    data.map(sudoku => {\n      sudoku.schema.map(row => {\n        row.row.map(tile => {\n          grid.push({\n            number: tile.n,\n            r: sudoku.schema.indexOf(row),\n            c: row.row.indexOf(tile),\n            id: nanoid(),\n            isInitValue: tile.n === \"\" ? false : true,\n            note: [],\n            highligh: false\n          });\n        });\n      });\n    });\n    return grid;\n  }\n\n  function allNumbers() {\n    const numbers = [];\n\n    for (let i = 0; i < 10; i++) {\n      numbers.push(createNumber(i));\n    }\n\n    return numbers;\n  }\n\n  function createNumber(i) {\n    return {\n      value: i === 0 ? \"\" : i,\n      isSelected: false,\n      id: nanoid(),\n      count: sudoku.filter(s => s.number === i).length\n    };\n  }\n\n  function generateSquares() {\n    const sq = [];\n\n    for (let j = 0; j < 61; j = j + 27) {\n      for (let i = j; i < j + 8; i = i + 3) {\n        sq.push(sudoku.slice(i, i + 3).concat(sudoku.slice(i + 9, i + 12)).concat(sudoku.slice(i + 18, i + 21)));\n      }\n    }\n\n    return sq;\n  }\n\n  function generateColumns() {\n    const columns = [];\n\n    for (let i = 0; i < 9; i++) {\n      columns.push([]);\n\n      for (let j = 0; j < 9; j++) {\n        columns[i].push(rows[j][i]);\n      }\n    }\n\n    return columns;\n  }\n\n  function generateRows() {\n    const rows = [];\n\n    for (let i = 0; i < 81; i = i + 9) {\n      rows.push(sudoku.slice(i, i + 9));\n    }\n\n    return rows;\n  }\n\n  function addNotes() {\n    setNotesMode(old => !old);\n  }\n\n  function selectNumber(id, value) {\n    setSelectedNum(value);\n    setNumbers(oldNumber => oldNumber.map(n => {\n      return n.id === id ? { ...n,\n        isSelected: true\n      } : { ...n,\n        isSelected: false\n      };\n    }));\n  }\n\n  function tileSelected(id, value) {\n    if (value != \"\") {\n      setSudoku(oldSudoku => oldSudoku.map(s => {\n        return s.number === value ? { ...s,\n          highligh: true\n        } : { ...s,\n          highligh: false\n        };\n      }));\n    }\n\n    notesMode ? insertNotes(id) : insertNum(id, value);\n  }\n\n  function insertNum(id, value) {\n    const isInitValue = sudoku.filter(s => s.id === id)[0].isInitValue;\n    const isOnBound = numbers.filter(n => n.value === selectedNum)[0].count < 9;\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      if (s.id === id && !s.isInitValue && isOnBound) {\n        return { ...s,\n          number: selectedNum,\n          note: []\n        };\n      } else return s;\n    }));\n\n    if (value === \"\") {\n      setNumbers(oldNumber => oldNumber.map(n => {\n        return n.value === selectedNum && n.count < 9 ? { ...n,\n          count: n.count + 1\n        } : n;\n      }));\n    } else {\n      setNumbers(oldNumber => oldNumber.map(n => {\n        if (value === selectedNum || isInitValue) return n;else if (n.value === selectedNum && n.count < 9) return { ...n,\n          count: n.count + 1\n        };else if (n.value === value && n.count > 0) return { ...n,\n          count: n.count - 1\n        };else return n;\n      }));\n    }\n  }\n\n  function insertNotes(id) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      if (s.id === id && s.number === \"\") {\n        if (s.note.filter(note => note === selectedNum).length === 1) {\n          return { ...s,\n            note: s.note.filter(note => note != selectedNum)\n          };\n        } else return { ...s,\n          note: [...s.note, selectedNum]\n        };\n      }\n\n      return s;\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNotes,\n      children: notesMode ? \"notes\" : \"write\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"96qYma0rZ9LUkl+OFpFM5fxfFcw=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/sudoku/src/App.js"],"names":["React","Tile","Number","data","nanoid","App","sudoku","setSudoku","useState","generateSudokuGrid","numbers","setNumbers","allNumbers","squares","setSquares","generateSquares","rows","setRows","generateRows","columns","setColumns","generateColumns","selectedNum","setSelectedNum","notesMode","setNotesMode","winGame","setWinGame","rowNumber","map","n","value","isSelected","id","count","selectNumber","sudokuGrid","s","number","r","c","isInitValue","tileSelected","note","highligh","useEffect","allSelected","every","squareCheck","sq","uniqueSquare","Set","size","rowCheck","row","uniqueRow","columnCheck","column","uniqueColumn","console","log","grid","schema","tile","push","indexOf","i","createNumber","filter","length","j","slice","concat","addNotes","old","oldNumber","oldSudoku","insertNotes","insertNum","isOnBound"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC1B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAAeC,kBAAkB,EAAjC,CAA5B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBX,KAAK,CAACQ,QAAN,CAAeI,UAAU,EAAzB,CAA9B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,KAAK,CAACQ,QAAN,CAAeO,eAAe,EAA9B,CAA9B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,KAAK,CAACQ,QAAN,CAAeU,YAAY,EAA3B,CAAxB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBpB,KAAK,CAACQ,QAAN,CAAea,eAAe,EAA9B,CAA9B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCvB,KAAK,CAACQ,QAAN,EAAtC;AACA,QAAM,CAACgB,SAAD,EAAYC,YAAZ,IAA4BzB,KAAK,CAACQ,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwB3B,KAAK,CAACQ,QAAN,CAAe,KAAf,CAA9B;AAEA,QAAMoB,SAAS,GAAGlB,OAAO,CAACmB,GAAR,CAAYC,CAAC,IAAI;AAC/B,wBAAO,QAAC,MAAD;AACC,MAAA,KAAK,EAAEA,CAAC,CAACC,KADV;AAEC,MAAA,UAAU,EAAED,CAAC,CAACE,UAFf;AAGC,MAAA,EAAE,EAAEF,CAAC,CAACG,EAHP;AAIC,MAAA,KAAK,EAAEH,CAAC,CAACI,KAJV;AAKC,MAAA,YAAY,EAAG,MAAMC,YAAY,CAACL,CAAC,CAACG,EAAH,EAAOH,CAAC,CAACC,KAAT;AALlC;AAAA;AAAA;AAAA;AAAA,YAAP;AAOH,GARiB,CAAlB;AASA,QAAMK,UAAU,GAAG9B,MAAM,CAACuB,GAAP,CAAWQ,CAAC,IAAG;AAC9B,wBACI,QAAC,IAAD;AACI,MAAA,EAAE,EAAEA,CAAC,CAACJ,EADV;AAEI,MAAA,MAAM,EAAII,CAAC,CAACC,MAFhB;AAGI,MAAA,CAAC,EAAID,CAAC,CAACE,CAHX;AAII,MAAA,CAAC,EAAIF,CAAC,CAACG,CAJX;AAKI,MAAA,WAAW,EAAEH,CAAC,CAACI,WALnB;AAMI,MAAA,SAAS,EAAI,MAAMC,YAAY,CAAEL,CAAC,CAACJ,EAAJ,EAAUI,CAAC,CAACC,MAAZ,CANnC;AAOI,MAAA,IAAI,EAAID,CAAC,CAACM,IAPd;AAQI,MAAA,QAAQ,EAAIN,CAAC,CAACO;AARlB;AAAA;AAAA;AAAA;AAAA,YADJ;AAWK,GAZU,CAAnB;AAeA5C,EAAAA,KAAK,CAAC6C,SAAN,CAAgB,MAAM;AAClB,UAAMC,WAAW,GAAGpC,OAAO,CAACqC,KAAR,CAAcjB,CAAC,IAAIA,CAAC,CAACI,KAAF,KAAY,CAA/B,CAApB;;AACA,QAAIY,WAAJ,EAAkB;AACd,YAAME,WAAW,GAAGnC,OAAO,CAACkC,KAAR,CAAcE,EAAE,IAAI;AACpC,cAAMC,YAAY,GAAG,IAAIC,GAAJ,CAAQF,EAAR,CAArB;AACA,eAAOC,YAAY,CAACE,IAAb,OAAwB,CAA/B;AACA,OAHgB,CAApB;AAIA,YAAMC,QAAQ,GAAGrC,IAAI,CAAC+B,KAAL,CAAWO,GAAG,IAAI;AAC/B,cAAMC,SAAS,GAAG,IAAIJ,GAAJ,CAAQG,GAAR,CAAlB;AACA,eAAOC,SAAS,CAACH,IAAV,OAAqB,CAA5B;AACH,OAHgB,CAAjB;AAIA,YAAMI,WAAW,GAAGrC,OAAO,CAAC4B,KAAR,CAAcU,MAAM,IAAI;AACxC,cAAMC,YAAY,GAAG,IAAIP,GAAJ,CAAQM,MAAR,CAArB;AACA,eAAOC,YAAY,CAACN,IAAb,OAAwB,CAA/B;AACH,OAHmB,CAApB;;AAKD,UAAGJ,WAAW,IAAIK,QAAf,IAA2BG,WAA9B,EAA0C;AACvC7B,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAgC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACF;AACH;AACJ,GArBD,EAqBG,CAAClD,OAAD,CArBH;;AAuBA,WAASD,kBAAT,GAA8B;AAC5B,UAAMoD,IAAI,GAAG,EAAb;AACI1D,IAAAA,IAAI,CAAC0B,GAAL,CAASvB,MAAM,IAAI;AAEPA,MAAAA,MAAM,CAACwD,MAAP,CAAcjC,GAAd,CAAkByB,GAAG,IAAG;AAEhBA,QAAAA,GAAG,CAACA,GAAJ,CAAQzB,GAAR,CAAYkC,IAAI,IAAG;AACfF,UAAAA,IAAI,CAACG,IAAL,CAAU;AACF1B,YAAAA,MAAM,EAAEyB,IAAI,CAACjC,CADX;AAEFS,YAAAA,CAAC,EAAEjC,MAAM,CAACwD,MAAP,CAAcG,OAAd,CAAsBX,GAAtB,CAFD;AAGFd,YAAAA,CAAC,EAAEc,GAAG,CAACA,GAAJ,CAAQW,OAAR,CAAgBF,IAAhB,CAHD;AAIF9B,YAAAA,EAAE,EAAE7B,MAAM,EAJR;AAKFqC,YAAAA,WAAW,EAAGsB,IAAI,CAACjC,CAAL,KAAW,EAAZ,GAAiB,KAAjB,GAAyB,IALpC;AAMFa,YAAAA,IAAI,EAAE,EANJ;AAOFC,YAAAA,QAAQ,EAAE;AAPR,WAAV;AASH,SAVD,CADJ;AAaH,OAdD,CADJ;AAiBH,KAlBL;AAmBF,WAAOiB,IAAP;AACH;;AAED,WAASjD,UAAT,GAAsB;AACd,UAAMF,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBxD,MAAAA,OAAO,CAACsD,IAAR,CAAaG,YAAY,CAACD,CAAD,CAAzB;AACH;;AACD,WAAOxD,OAAP;AACH;;AACL,WAASyD,YAAT,CAAsBD,CAAtB,EAAyB;AACjB,WAAO;AACHnC,MAAAA,KAAK,EAAImC,CAAC,KAAK,CAAP,GAAW,EAAX,GAAeA,CADpB;AAEHlC,MAAAA,UAAU,EAAE,KAFT;AAGHC,MAAAA,EAAE,EAAE7B,MAAM,EAHP;AAIH8B,MAAAA,KAAK,EAAE5B,MAAM,CAAC8D,MAAP,CAAe/B,CAAD,IAAOA,CAAC,CAACC,MAAF,KAAa4B,CAAlC,EAAqCG;AAJzC,KAAP;AAMC;;AAET,WAAStD,eAAT,GAA0B;AACtB,UAAMkC,EAAE,GAAG,EAAX;;AACA,SAAI,IAAIqB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,GAAGA,CAAC,GAAG,EAA/B,EAAkC;AAClC,WAAI,IAAIJ,CAAC,GAAGI,CAAZ,EAAeJ,CAAC,GAAGI,CAAC,GAAG,CAAvB,EAA0BJ,CAAC,GAAGA,CAAC,GAAG,CAAlC,EAAoC;AAChCjB,QAAAA,EAAE,CAACe,IAAH,CAAU1D,MAAM,CAACiE,KAAP,CAAaL,CAAb,EAAgBA,CAAC,GAAE,CAAnB,EAAsBM,MAAtB,CACTlE,MAAM,CAACiE,KAAP,CAAaL,CAAC,GAAG,CAAjB,EAAoBA,CAAC,GAAG,EAAxB,CADS,CAAD,CACsBM,MADtB,CAERlE,MAAM,CAACiE,KAAP,CAAaL,CAAC,GAAE,EAAhB,EAAoBA,CAAC,GAAG,EAAxB,CAFQ,CAAT;AAGH;AACA;;AACD,WAAOjB,EAAP;AACH;;AACD,WAAS5B,eAAT,GAA0B;AACtB,UAAMF,OAAO,GAAG,EAAhB;;AACA,SAAI,IAAI+C,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACtB/C,MAAAA,OAAO,CAAC6C,IAAR,CAAa,EAAb;;AACA,WAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,CAAnB,EAAsBA,CAAC,EAAvB,EAA0B;AACrBnD,QAAAA,OAAO,CAAC+C,CAAD,CAAR,CAAaF,IAAb,CAAkBhD,IAAI,CAACsD,CAAD,CAAJ,CAAQJ,CAAR,CAAlB;AACH;AACJ;;AACD,WAAO/C,OAAP;AACH;;AACD,WAASD,YAAT,GAAuB;AACnB,UAAMF,IAAI,GAAG,EAAb;;AACA,SAAI,IAAIkD,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,EAAnB,EAAuBA,CAAC,GAAGA,CAAC,GAAG,CAA/B,EAAiC;AAC7BlD,MAAAA,IAAI,CAACgD,IAAL,CAAU1D,MAAM,CAACiE,KAAP,CAAaL,CAAb,EAAgBA,CAAC,GAAG,CAApB,CAAV;AACH;;AACD,WAAOlD,IAAP;AACH;;AAED,WAASyD,QAAT,GAAmB;AACfhD,IAAAA,YAAY,CAACiD,GAAG,IAAI,CAACA,GAAT,CAAZ;AACH;;AACD,WAASvC,YAAT,CAAsBF,EAAtB,EAAyBF,KAAzB,EAAgC;AAC5BR,IAAAA,cAAc,CAACQ,KAAD,CAAd;AACApB,IAAAA,UAAU,CAACgE,SAAS,IAAIA,SAAS,CAAC9C,GAAV,CAAcC,CAAC,IAAI;AACvC,aAAOA,CAAC,CAACG,EAAF,KAASA,EAAT,GACH,EAAC,GAAGH,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OADG,GAEH,EAAC,GAAGF,CAAJ;AAAOE,QAAAA,UAAU,EAAE;AAAnB,OAFJ;AAGH,KAJuB,CAAd,CAAV;AAKC;;AACL,WAASU,YAAT,CAAsBT,EAAtB,EAA0BF,KAA1B,EAAgC;AAC5B,QAAGA,KAAK,IAAI,EAAZ,EAAe;AACXxB,MAAAA,SAAS,CAACqE,SAAS,IAAGA,SAAS,CAAC/C,GAAV,CAAcQ,CAAC,IAAI;AACvC,eAAOA,CAAC,CAACC,MAAF,KAAaP,KAAb,GAAoB,EAAC,GAAGM,CAAJ;AAAOO,UAAAA,QAAQ,EAAE;AAAjB,SAApB,GAA4C,EAAC,GAAGP,CAAJ;AAAOO,UAAAA,QAAQ,EAAE;AAAjB,SAAnD;AACD,OAFqB,CAAb,CAAT;AAGH;;AACDpB,IAAAA,SAAS,GAAEqD,WAAW,CAAC5C,EAAD,CAAb,GAAoB6C,SAAS,CAAC7C,EAAD,EAAKF,KAAL,CAAtC;AACH;;AACD,WAAS+C,SAAT,CAAmB7C,EAAnB,EAAuBF,KAAvB,EAA8B;AAClB,UAAMU,WAAW,GAAGnC,MAAM,CAAC8D,MAAP,CAAc/B,CAAC,IAAIA,CAAC,CAACJ,EAAF,KAASA,EAA5B,EAAgC,CAAhC,EAAmCQ,WAAvD;AACA,UAAMsC,SAAS,GAAGrE,OAAO,CAAC0D,MAAR,CAAetC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYT,WAAhC,EAA6C,CAA7C,EAAgDY,KAAhD,GAAwD,CAA1E;AAEA3B,IAAAA,SAAS,CAACqE,SAAS,IAAIA,SAAS,CAAC/C,GAAV,CAAcQ,CAAC,IAAI;AACtC,UAAGA,CAAC,CAACJ,EAAF,KAASA,EAAT,IAAe,CAACI,CAAC,CAACI,WAAlB,IAAiCsC,SAApC,EAA8C;AAC9C,eAAO,EAAC,GAAG1C,CAAJ;AAAOC,UAAAA,MAAM,EAAEhB,WAAf;AAA4BqB,UAAAA,IAAI,EAAE;AAAlC,SAAP;AACC,OAFD,MAKA,OAAON,CAAP;AACH,KAPsB,CAAd,CAAT;;AAQJ,QAAIN,KAAK,KAAK,EAAd,EAAiB;AACbpB,MAAAA,UAAU,CAACgE,SAAS,IAAIA,SAAS,CAAC9C,GAAV,CAAcC,CAAC,IAAI;AACvC,eAAOA,CAAC,CAACC,KAAF,KAAYT,WAAZ,IAA4BQ,CAAC,CAACI,KAAF,GAAU,CAAtC,GACH,EAAC,GAAGJ,CAAJ;AAAOI,UAAAA,KAAK,EAAGJ,CAAC,CAACI,KAAF,GAAU;AAAzB,SADG,GAC4BJ,CADnC;AAEL,OAHyB,CAAd,CAAV;AAGE,KAJN,MAKI;AACJnB,MAAAA,UAAU,CAACgE,SAAS,IAAIA,SAAS,CAAC9C,GAAV,CAAcC,CAAC,IAAI;AAC3B,YAAIC,KAAK,KAAKT,WAAV,IAAyBmB,WAA7B,EACI,OAAOX,CAAP,CADJ,KAEI,IAAGA,CAAC,CAACC,KAAF,KAAYT,WAAZ,IAA2BQ,CAAC,CAACI,KAAF,GAAU,CAAxC,EACH,OAAO,EAAC,GAAGJ,CAAJ;AAAOI,UAAAA,KAAK,EAAGJ,CAAC,CAACI,KAAF,GAAU;AAAzB,SAAP,CADG,KAEA,IAAIJ,CAAC,CAACC,KAAF,KAAYA,KAAZ,IAAqBD,CAAC,CAACI,KAAF,GAAU,CAAnC,EACJ,OAAO,EAAC,GAAGJ,CAAJ;AAAOI,UAAAA,KAAK,EAAGJ,CAAC,CAACI,KAAF,GAAU;AAAzB,SAAP,CADI,KAGJ,OAAOJ,CAAP;AACL,OATa,CAAd,CAAV;AAUC;AACA;;AACT,WAAS+C,WAAT,CAAqB5C,EAArB,EAAyB;AAClB1B,IAAAA,SAAS,CAACqE,SAAS,IAAIA,SAAS,CAAC/C,GAAV,CAAcQ,CAAC,IAAI;AACzC,UAAIA,CAAC,CAACJ,EAAF,KAASA,EAAT,IAAiBI,CAAC,CAACC,MAAH,KAAe,EAAnC,EAAwC;AACtC,YAAKD,CAAC,CAACM,IAAH,CAASyB,MAAT,CAAgBzB,IAAI,IAAIA,IAAI,KAAKrB,WAAjC,CAAD,CAAgD+C,MAAhD,KAA2D,CAA9D,EAAgE;AAC9D,iBAAO,EAAC,GAAGhC,CAAJ;AAAOM,YAAAA,IAAI,EAAIN,CAAC,CAACM,IAAH,CAASyB,MAAT,CAAgBzB,IAAI,IAAIA,IAAI,IAAIrB,WAAhC;AAAd,WAAP;AACD,SAFD,MAIE,OAAO,EAAC,GAAGe,CAAJ;AAAOM,UAAAA,IAAI,EAAE,CAAC,GAAGN,CAAC,CAACM,IAAN,EAAYrB,WAAZ;AAAb,SAAP;AACD;;AACD,aAAQe,CAAR;AACF,KATsB,CAAd,CAAT;AAUN;;AAED,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,gBACKD;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA,gBACKR;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAQ,MAAA,OAAO,EAAE6C,QAAjB;AAAA,gBAA6BjD,SAAS,GAAG,OAAH,GAAa;AAAnD;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAvMuBnB,G;;KAAAA,G","sourcesContent":["import React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const [numbers, setNumbers] = React.useState(allNumbers())\n    const [squares, setSquares] = React.useState(generateSquares())\n    const [rows, setRows] = React.useState(generateRows())\n    const [columns, setColumns] = React.useState(generateColumns())\n    const [selectedNum, setSelectedNum] = React.useState()\n    const [notesMode, setNotesMode] = React.useState(false)\n    const [winGame, setWinGame] = React.useState(false)\n\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                value={n.value}\n                isSelected={n.isSelected}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => selectNumber(n.id, n.value)}\n                />)\n    })\n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                number = {s.number}\n                r = {s.r}\n                c = {s.c}\n                isInitValue={s.isInitValue}\n                insertNum = {() => tileSelected((s.id), (s.number))}\n                note = {s.note}\n                highligh = {s.highligh}\n            />)\n            })\n\n\n    React.useEffect(() => {\n        const allSelected = numbers.every(n => n.count === 9)\n        if (allSelected ) {\n            const squareCheck = squares.every(sq => {\n                const uniqueSquare = new Set(sq)\n                return uniqueSquare.size() === 9\n               } )\n            const rowCheck = rows.every(row => {\n                const uniqueRow = new Set(row)\n                return uniqueRow.size() === 9\n            })\n            const columnCheck = columns.every(column => {\n                const uniqueColumn = new Set(column)\n                return uniqueColumn.size() === 9\n            })\n\n           if(squareCheck && rowCheck && columnCheck){\n              setWinGame(true)\n              console.log(\"YOU WON\")\n           }\n        }\n    }, [numbers])\n\n    function generateSudokuGrid() {\n      const grid = []\n          data.map(sudoku => {\n                  (\n                      sudoku.schema.map(row =>{\n                          (\n                              row.row.map(tile =>{\n                                  grid.push({\n                                          number: tile.n ,\n                                          r: sudoku.schema.indexOf(row),\n                                          c: row.row.indexOf(tile),\n                                          id: nanoid(),\n                                          isInitValue: (tile.n === \"\")? false : true,\n                                          note: [],\n                                          highligh: false\n                                          })\n                              })\n                          )\n                      })\n                  )\n              })\n        return grid\n    }\n\n    function allNumbers() {\n            const numbers = []\n            for (let i = 0; i < 10; i++) {\n                numbers.push(createNumber(i))\n            }\n            return numbers\n        }\n    function createNumber(i) {\n            return {\n                value: ((i === 0)? \"\": i),\n                isSelected: false,\n                id: nanoid(),\n                count: sudoku.filter((s) => s.number === i).length\n                }\n            }\n\n    function generateSquares(){\n        const sq = []\n        for(let j = 0; j < 61; j = j + 27){\n        for(let i = j; i < j + 8; i = i + 3){\n            sq.push ((sudoku.slice(i, i +3).concat\n            (sudoku.slice(i + 9, i + 12))).concat\n            (sudoku.slice(i +18, i + 21)))\n        }\n        }\n        return sq\n    }\n    function generateColumns(){\n        const columns = []\n        for(let i = 0; i < 9; i++){\n            columns.push([])\n            for(let j = 0; j < 9; j++){\n                (columns[i]).push(rows[j][i])\n            }\n        }\n        return columns;\n    }\n    function generateRows(){\n        const rows = []\n        for(let i = 0; i < 81; i = i + 9){\n            rows.push(sudoku.slice(i, i + 9 ))\n        }\n        return rows;\n    }\n\n    function addNotes(){\n        setNotesMode(old => !old)\n    }\n    function selectNumber(id,value) {\n        setSelectedNum(value)\n        setNumbers(oldNumber => oldNumber.map(n => {\n            return n.id === id ?\n                {...n, isSelected: true} :\n                {...n, isSelected: false}\n        }))\n        }\n    function tileSelected(id, value){\n        if(value != \"\"){\n            setSudoku(oldSudoku=> oldSudoku.map(s => {\n              return s.number === value? {...s, highligh: true}: {...s, highligh: false}\n            }))\n        }\n        notesMode? insertNotes(id) : insertNum(id, value)\n    }\n    function insertNum(id, value) {\n                const isInitValue = sudoku.filter(s => s.id === id)[0].isInitValue\n                const isOnBound = numbers.filter(n => n.value === selectedNum)[0].count < 9\n\n                setSudoku(oldSudoku => oldSudoku.map(s => {\n                    if(s.id === id && !s.isInitValue && isOnBound){\n                    return {...s, number: selectedNum, note: []}\n                    }\n\n                    else\n                    return s\n                }))\n            if (value === \"\"){\n                setNumbers(oldNumber => oldNumber.map(n => {\n                    return n.value === selectedNum  && n.count < 9?\n                        {...n, count: (n.count + 1)} : n\n              }))}\n            else{\n            setNumbers(oldNumber => oldNumber.map(n => {\n                            if (value === selectedNum || isInitValue)\n                                return n\n                           else if(n.value === selectedNum && n.count < 9)\n                             return {...n, count: (n.count + 1)}\n                           else if (n.value === value && n.count > 0)\n                            return {...n, count: (n.count - 1)}\n                            else\n                            return n\n                      }))\n            }\n            }\n    function insertNotes(id) {\n           setSudoku(oldSudoku => oldSudoku.map(s => {\n            if (s.id === id && ((s.number) === \"\") ){\n              if(((s.note).filter(note => note === selectedNum)).length === 1){\n                return {...s, note: ((s.note).filter(note => note != selectedNum))}\n              }\n              else\n                return {...s, note: [...s.note, selectedNum]}\n              }\n              return  s\n           }))\n    }\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <button onClick={addNotes} >{notesMode ? \"notes\" : \"write\"}</button>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
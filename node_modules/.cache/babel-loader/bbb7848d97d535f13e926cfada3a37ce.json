{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useState, useEffect } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tile(props) {\n  _s();\n\n  const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\" + props.id)) ? JSON.parse(localStorage.getItem(\"notes\" + props.id)).map(_ref => {\n    let {\n      value: element\n    } = _ref;\n    return element;\n  }) : createNotes());\n  const [value, setValue] = useState(props.value);\n  const highligh = {\n    backgroundColor: props.highligh ? \"#59E391\" : \"white\"\n  };\n  let name;\n\n  if ((props.c === 2 || props.c === 5) && (props.r === 2 || props.r === 5)) {\n    name = \"singleTileThickCR\";\n  } else if (props.c === 2 || props.c === 5) {\n    name = \"singleTileThickC\";\n  } else if (props.r === 2 || props.r === 5) {\n    name = \"singleTileThickR\";\n  } else {\n    name = \"singleTile\";\n  }\n\n  useEffect(() => {\n    if (props.note && props.note != \"\") {\n      console.log(\"in if\");\n      setNotes(old => [...new Set([...old, props.note])]);\n    } else setNotes(() => []);\n  }, [props.note]);\n\n  function createNotes() {\n    return props.note && props.note != \"\" ? [props.note] : [];\n  }\n\n  useEffect(() => {\n    localStorage.setItem(\"notes\" + props.id, JSON.stringify(notes.map(element => {\n      return {\n        value: element\n      };\n    })));\n  }, [notes]);\n  useEffect(() => {\n    setValue(props.value);\n  }, [props.value]);\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  const container = document.getElementById('tile');\n  container.addEventListener('keyup', function (e) {\n    this.value = e.key;\n  });\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: name,\n    onClick: props.fillTile,\n    children: [!props.notesMode && /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"tile\",\n      type: \"text\",\n      onChange: handleChange,\n      value: value,\n      required: true,\n      maxlength: \"1\",\n      size: \"1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this), false && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"number\",\n      children: [\" \", props.value === 0 ? \"\" : props.value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.notesMode && /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"notes\",\n        children: [\" \", notes, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tile, \"9b1TfqcjxK5yh3sGonvilC30SXE=\");\n\n_c = Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js"],"names":["React","Fragment","useContext","useState","useEffect","nanoid","Tile","props","notes","setNotes","JSON","parse","localStorage","getItem","id","map","value","element","createNotes","setValue","highligh","backgroundColor","name","c","r","note","console","log","old","Set","setItem","stringify","handleChange","event","target","container","document","getElementById","addEventListener","e","key","fillTile","notesMode"],"mappings":"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","sourcesContent":["import React,{ Fragment, useContext, useState, useEffect }  from 'react';\nimport {nanoid} from \"nanoid\"\n\nexport default function Tile(props){\n    const [notes, setNotes] = useState(JSON.parse(localStorage.getItem(\"notes\" + props.id))?\n    (JSON.parse(localStorage.getItem(\"notes\" + props.id)).map(({value: element}) => {return element} )) : createNotes())\n    const [value, setValue] = useState(props.value) \n    const highligh = {\n        backgroundColor: props.highligh? \"#59E391\" : \"white\"\n    }\n\n    let name\n        if ((props.c===2 || props.c===5) && (props.r===2 || props.r===5)) {\n            name = \"singleTileThickCR\"\n        } else if (props.c===2 || props.c===5) {\n            name = \"singleTileThickC\"\n        } else if (props.r===2 || props.r===5){\n            name = \"singleTileThickR\"\n        } else {\n            name = \"singleTile\"\n        }\n    useEffect(() => {\n        if(props.note && props.note != \"\"){\n            console.log(\"in if\")    \n            setNotes(old => [...new Set([...old, props.note])])\n        }\n        else \n            setNotes(() => [])\n    }, [props.note])\n\n    function createNotes(){\n        return (props.note && props.note != \"\")? [props.note] : []\n    }\n    useEffect(() => {\n        localStorage.setItem(\"notes\"+ props.id, JSON.stringify(notes.map(element => {return {value:element}})))\n    }, [notes])\n    \n    useEffect(() => {\n        setValue(props.value)\n    }, [props.value])\n\n    function handleChange(event) {\n        setValue(event.target.value)\n    }\n    const container = document.getElementById('tile');\n    container.addEventListener('keyup', function(e) {\n    this.value = e.key;\n    });\n    return(\n        \n        <button className= {name} onClick = {props.fillTile} >\n            {!props.notesMode &&\n                <input\n                    id =\"tile\"\n                    type=\"text\"\n                    onChange={handleChange}\n                    value={value}\n                    required\n                    maxlength=\"1\" size=\"1\"\n                />\n            }\n            {false && <h2 className=\"number\" > {props.value === 0 ? \"\": props.value} </h2>}\n            <div>\n            {props.notesMode && <h4 className=\"notes\"> {notes} </h4>}\n            </div>\n         </button>\n    )\n}"]},"metadata":{},"sourceType":"module"}
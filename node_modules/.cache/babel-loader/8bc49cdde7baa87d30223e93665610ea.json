{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useContext, useState, useEffect } from 'react';\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Tile(props) {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  let name;\n\n  if ((props.c === 2 || props.c === 5) && (props.r === 2 || props.r === 5)) {\n    name = \"singleTileThickCR\";\n  } else if (props.c === 2 || props.c === 5) {\n    name = \"singleTileThickC\";\n  } else if (props.r === 2 || props.r === 5) {\n    name = \"singleTileThickR\";\n  } else {\n    name = \"singleTile\";\n  }\n\n  const highligh = {\n    backgroundColor: props.highligh ? \"#59E391\" : \"white\"\n  };\n  useEffect(() => {\n    console.log(props.note);\n    setNotes(old => [...old, props.note]);\n    console.log(notes);\n  }, [props.note]);\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: name,\n    onClick: props.fillTile,\n    children: [!props.notesMode && /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"number\",\n      children: [\" \", props.value === 0 ? \"\" : props.value, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 34\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.notesMode && /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"notes\",\n        children: \"  \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Tile, \"vOaC7rmji7ux6HtcIeocV+tl1oY=\");\n\n_c = Tile;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tile\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Tile.js"],"names":["React","Fragment","useContext","useState","useEffect","nanoid","Tile","props","notes","setNotes","name","c","r","highligh","backgroundColor","console","log","note","old","fillTile","notesMode","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,UAAzB,EAAqCC,QAArC,EAA+CC,SAA/C,QAAiE,OAAjE;AACA,SAAQC,MAAR,QAAqB,QAArB;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAoB;AAAA;;AAC/B,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACC,MAAIO,IAAJ;;AACG,MAAI,CAACH,KAAK,CAACI,CAAN,KAAU,CAAV,IAAeJ,KAAK,CAACI,CAAN,KAAU,CAA1B,MAAiCJ,KAAK,CAACK,CAAN,KAAU,CAAV,IAAeL,KAAK,CAACK,CAAN,KAAU,CAA1D,CAAJ,EAAkE;AAC9DF,IAAAA,IAAI,GAAG,mBAAP;AACH,GAFD,MAEO,IAAIH,KAAK,CAACI,CAAN,KAAU,CAAV,IAAeJ,KAAK,CAACI,CAAN,KAAU,CAA7B,EAAgC;AACnCD,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA,IAAIH,KAAK,CAACK,CAAN,KAAU,CAAV,IAAeL,KAAK,CAACK,CAAN,KAAU,CAA7B,EAA+B;AAClCF,IAAAA,IAAI,GAAG,kBAAP;AACH,GAFM,MAEA;AACHA,IAAAA,IAAI,GAAG,YAAP;AACH;;AACL,QAAMG,QAAQ,GAAG;AACbC,IAAAA,eAAe,EAAEP,KAAK,CAACM,QAAN,GAAgB,SAAhB,GAA4B;AADhC,GAAjB;AAIAT,EAAAA,SAAS,CAAC,MAAM;AACZW,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACU,IAAlB;AACAR,IAAAA,QAAQ,CAACS,GAAG,IAAI,CAAC,GAAGA,GAAJ,EAASX,KAAK,CAACU,IAAf,CAAR,CAAR;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACH,GAJQ,EAIN,CAACD,KAAK,CAACU,IAAP,CAJM,CAAT;AAOA,sBACI;AAAQ,IAAA,SAAS,EAAGP,IAApB;AAA0B,IAAA,OAAO,EAAIH,KAAK,CAACY,QAA3C;AAAA,eACK,CAACZ,KAAK,CAACa,SAAP,iBAAoB;AAAI,MAAA,SAAS,EAAC,QAAd;AAAA,sBAA0Bb,KAAK,CAACc,KAAN,KAAgB,CAAhB,GAAoB,EAApB,GAAwBd,KAAK,CAACc,KAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,YADzB,eAEI;AAAA,gBACCd,KAAK,CAACa,SAAN,iBAAmB;AAAI,QAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADpB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/BuBd,I;;KAAAA,I","sourcesContent":["import React,{ Fragment, useContext, useState, useEffect }  from 'react';\nimport {nanoid} from \"nanoid\"\n\nexport default function Tile(props){\n    const [notes, setNotes] = useState([])\n     let name\n        if ((props.c===2 || props.c===5) && (props.r===2 || props.r===5)) {\n            name = \"singleTileThickCR\"\n        } else if (props.c===2 || props.c===5) {\n            name = \"singleTileThickC\"\n        } else if (props.r===2 || props.r===5){\n            name = \"singleTileThickR\"\n        } else {\n            name = \"singleTile\"\n        }\n    const highligh = {\n        backgroundColor: props.highligh? \"#59E391\" : \"white\"\n    }\n\n    useEffect(() => {\n        console.log(props.note)\n        setNotes(old => [...old, props.note])\n        console.log(notes)\n    }, [props.note])\n\n    \n    return(\n        <button className= {name} onClick = {props.fillTile} >\n            {!props.notesMode && <h2 className=\"number\" > {props.value === 0 ? \"\": props.value} </h2>}\n            <div>\n            {props.notesMode && <h4 className=\"notes\">  </h4>}\n            </div>\n         </button>\n    )\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './Tile';\nimport Number from './Number';\nimport data from \"./data\";\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const [numbers, setNumbers] = React.useState(allNumbers());\n  const [selectNum, setSelectNum] = React.useState();\n  const [notesMode, setNotesMode] = React.useState(false);\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isInitValue: s.isInitValue,\n      fillTile: () => fillTile(s.id),\n      notesMode: s.notesMode,\n      note: s.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  });\n\n  function fillTile(id) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      return s.id === id ? { ...s,\n        number: selectNum,\n        notesMode: notesMode,\n        note: [...s.note, selectNum]\n      } : s;\n    }));\n  }\n\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: n.value,\n      isSelected: n.isSelected,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => setSelectNum(n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  });\n\n  function generateSudokuGrid() {\n    const grid = [];\n    data.map(sudoku => {\n      sudoku.schema.map(row => {\n        row.row.map(tile => {\n          grid.push({\n            number: tile.n,\n            r: sudoku.schema.indexOf(row),\n            c: row.row.indexOf(tile),\n            id: nanoid(),\n            isInitValue: tile.n === \"\" ? false : true,\n            note: []\n          });\n        });\n      });\n    });\n    return grid;\n  }\n\n  function allNumbers() {\n    const numbers = [];\n\n    for (let i = 0; i < 10; i++) {\n      numbers.push(createNumber(i));\n    }\n\n    return numbers;\n  }\n\n  function createNumber(i) {\n    return {\n      value: i === 0 ? \"\" : i,\n      isSelected: false,\n      id: nanoid(),\n      count: sudoku.filter(s => s.number === i).length\n    };\n  }\n\n  function addNotes() {\n    setNotesMode(old => !old);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNotes,\n      children: notesMode ? \"notes\" : \"write\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"bx/+4J5dyiVXtdPwn/GwwM8Jtto=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Game.js"],"names":["React","Tile","Number","data","nanoid","Confetti","Game","sudoku","setSudoku","useState","generateSudokuGrid","numbers","setNumbers","allNumbers","selectNum","setSelectNum","notesMode","setNotesMode","sudokuGrid","map","s","id","number","r","c","isInitValue","fillTile","note","oldSudoku","rowNumber","n","value","isSelected","count","grid","schema","row","tile","push","indexOf","i","createNumber","filter","length","addNotes","old"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './Tile';\nimport Number from './Number';\nimport data from \"./data\"\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\n\nexport default function Game() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const [numbers, setNumbers] = React.useState(allNumbers())\n    const [selectNum, setSelectNum] = React.useState()\n    const [notesMode, setNotesMode] = React.useState(false)\n  \n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                number = {s.number}\n                r = {s.r}\n                c = {s.c}\n                isInitValue={s.isInitValue}\n                fillTile = {() => fillTile(s.id)}\n                notesMode = {s.notesMode}\n                note = {s.note}\n            />)\n            })\n    function fillTile(id){\n        setSudoku(oldSudoku => oldSudoku.map(s => {\n            return s.id === id ?\n                {...s, number: selectNum,  notesMode: notesMode, note : [...s.note, selectNum] } : s\n        }))\n    }\n    \n       const rowNumber = numbers.map(n => {\n        return(<Number\n                number={n.value}\n                isSelected={n.isSelected}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => setSelectNum(n.value)}\n                />)\n    })\n\n    function generateSudokuGrid() {\n        const grid = []\n            data.map(sudoku => {\n                    (\n                        sudoku.schema.map(row =>{\n                            (\n                                row.row.map(tile =>{\n                                    grid.push({\n                                            number: tile.n ,\n                                            r: sudoku.schema.indexOf(row),\n                                            c: row.row.indexOf(tile),\n                                            id: nanoid(),\n                                            isInitValue: (tile.n === \"\")? false : true,\n                                            note: [],\n                                            })\n                                })\n                            )\n                        })\n                    )\n                })\n          return grid\n      }\n      function allNumbers() {\n        const numbers = []\n        for (let i = 0; i < 10; i++) {\n            numbers.push(createNumber(i))\n        }\n        return numbers\n    }\n\n    function createNumber(i) {\n        return {\n            value: ((i === 0)? \"\": i),\n            isSelected: false,\n            id: nanoid(),\n            count: sudoku.filter((s) => s.number === i).length\n            }\n        }\n        function addNotes(){\n            setNotesMode(old => !old)\n        }\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <button onClick={addNotes} >{notesMode ? \"notes\" : \"write\"}</button>\n        </main>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/SudokuApi.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isInitValue: s.isInitValue,\n      fillTile: () => fillTile(s.id),\n      notesMode: s.notesMode,\n      note: s.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }, this);\n  });\n\n  function generateSudokuGrid() {\n    const grid = [];\n    data.map(sudoku => {\n      sudoku.schema.map(row => {\n        row.row.map(tile => {\n          grid.push({\n            number: tile.n,\n            r: sudoku.schema.indexOf(row),\n            c: row.row.indexOf(tile),\n            id: nanoid(),\n            isInitValue: tile.n === \"\" ? false : true,\n            note: []\n          });\n        });\n      });\n    });\n    return grid;\n  }\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: sudokuGrid\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"Aaj/o1+3l68AG35E9rmIXADCvSo=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/SudokuApi.js"],"names":["React","Fragment","Tile","data","nanoid","Game","sudoku","setSudoku","useState","generateSudokuGrid","sudokuGrid","map","s","id","number","r","c","isInitValue","fillTile","notesMode","note","grid","schema","row","tile","push","n","indexOf"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;;AAGA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACQ,QAAN,CAAeC,kBAAkB,EAAjC,CAA5B;AACA,QAAMC,UAAU,GAAGJ,MAAM,CAACK,GAAP,CAAWC,CAAC,IAAG;AAClC,wBACI,QAAC,IAAD;AACI,MAAA,EAAE,EAAEA,CAAC,CAACC,EADV;AAEI,MAAA,MAAM,EAAID,CAAC,CAACE,MAFhB;AAGI,MAAA,CAAC,EAAIF,CAAC,CAACG,CAHX;AAII,MAAA,CAAC,EAAIH,CAAC,CAACI,CAJX;AAKI,MAAA,WAAW,EAAEJ,CAAC,CAACK,WALnB;AAMI,MAAA,QAAQ,EAAI,MAAMC,QAAQ,CAACN,CAAC,CAACC,EAAH,CAN9B;AAOI,MAAA,SAAS,EAAID,CAAC,CAACO,SAPnB;AAQI,MAAA,IAAI,EAAIP,CAAC,CAACQ;AARd;AAAA;AAAA;AAAA;AAAA,YADJ;AAWK,GAZc,CAAnB;;AAaI,WAASX,kBAAT,GAA8B;AAC1B,UAAMY,IAAI,GAAG,EAAb;AACIlB,IAAAA,IAAI,CAACQ,GAAL,CAASL,MAAM,IAAI;AAEPA,MAAAA,MAAM,CAACgB,MAAP,CAAcX,GAAd,CAAkBY,GAAG,IAAG;AAEhBA,QAAAA,GAAG,CAACA,GAAJ,CAAQZ,GAAR,CAAYa,IAAI,IAAG;AACfH,UAAAA,IAAI,CAACI,IAAL,CAAU;AACFX,YAAAA,MAAM,EAAEU,IAAI,CAACE,CADX;AAEFX,YAAAA,CAAC,EAAET,MAAM,CAACgB,MAAP,CAAcK,OAAd,CAAsBJ,GAAtB,CAFD;AAGFP,YAAAA,CAAC,EAAEO,GAAG,CAACA,GAAJ,CAAQI,OAAR,CAAgBH,IAAhB,CAHD;AAIFX,YAAAA,EAAE,EAAET,MAAM,EAJR;AAKFa,YAAAA,WAAW,EAAGO,IAAI,CAACE,CAAL,KAAW,EAAZ,GAAiB,KAAjB,GAAyB,IALpC;AAMFN,YAAAA,IAAI,EAAE;AANJ,WAAV;AAQH,SATD,CADJ;AAYH,OAbD,CADJ;AAgBH,KAjBL;AAkBF,WAAOC,IAAP;AACH;;AACL,sBACE,QAAC,QAAD;AAAA,cACKX;AADL;AAAA;AAAA;AAAA;AAAA,UADF;AAKL;;GA1CuBL,I;;KAAAA,I","sourcesContent":["import React, { Fragment } from 'react';\nimport Tile from './Tile';\nimport data from \"./data\"\nimport {nanoid} from \"nanoid\"\n\n\nexport default function Game() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const sudokuGrid = sudoku.map(s =>{\n    return(\n        <Tile\n            id={s.id}\n            number = {s.number}\n            r = {s.r}\n            c = {s.c}\n            isInitValue={s.isInitValue}\n            fillTile = {() => fillTile(s.id)}\n            notesMode = {s.notesMode}\n            note = {s.note}\n        />)\n        })\n        function generateSudokuGrid() {\n            const grid = []\n                data.map(sudoku => {\n                        (\n                            sudoku.schema.map(row =>{\n                                (\n                                    row.row.map(tile =>{\n                                        grid.push({\n                                                number: tile.n ,\n                                                r: sudoku.schema.indexOf(row),\n                                                c: row.row.indexOf(tile),\n                                                id: nanoid(),\n                                                isInitValue: (tile.n === \"\")? false : true,\n                                                note: [],\n                                                })\n                                    })\n                                )\n                            })\n                        )\n                    })\n              return grid\n          }\n      return (\n        <Fragment>\n            {sudokuGrid}\n       </Fragment>\n        )   \n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/sudoku/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [numbers, setNumbers] = React.useState(allNumbers());\n  const [selectedNum, setSelectedNum] = React.useState();\n\n  function selectNumber(id, value) {\n    setSelectedNum(value);\n    setNumbers(oldNumber => oldNumber.map(n => {\n      return n.id === id ? { ...n,\n        isSelected: true\n      } : { ...n,\n        isSelected: false\n      };\n    }));\n  }\n\n  const numberGrid = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      value: n.value,\n      isSelected: n.isSelected,\n      id: n.id,\n      selectNumber: () => selectNumber(n.id, n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  });\n  const grid = data.map(sudoku => {\n    return sudoku.schema.map(row => {\n      return row.row.map(tile => {\n        return /*#__PURE__*/_jsxDEV(Tile, {\n          number: tile.n,\n          r: sudoku.schema.indexOf(row),\n          c: row.row.indexOf(tile)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 32\n        }, this);\n      });\n    });\n  });\n\n  function allNumbers() {\n    const numbers = [];\n\n    for (let i = 1; i < 10; i++) {\n      numbers.push(createNumber(i));\n    }\n\n    console.log(numbers);\n    return numbers;\n  }\n\n  function createNumber(i) {\n    return {\n      value: i,\n      isSelected: false,\n      id: nanoid()\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: grid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: numberGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: selectedNum\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"rlmR5F9njBTVBoFgpaw/voHFk8Y=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/sudoku/src/App.js"],"names":["React","Tile","Number","data","nanoid","App","numbers","setNumbers","useState","allNumbers","selectedNum","setSelectedNum","selectNumber","id","value","oldNumber","map","n","isSelected","numberGrid","grid","sudoku","schema","row","tile","indexOf","i","push","createNumber","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Tile from './components/Tile';\nimport Number from './components/Number';\nimport data from \"./components/data\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n    const [numbers, setNumbers] = React.useState(allNumbers())\n    const [selectedNum, setSelectedNum] = React.useState()\n\n    function selectNumber(id,value) {\n        setSelectedNum(value)\n        setNumbers(oldNumber => oldNumber.map(n => {\n            return n.id === id ?\n                {...n, isSelected: true} :\n                {...n, isSelected: false}\n        }))\n\n    }\n\n    const numberGrid = numbers.map(n => {\n        return(<Number\n                value={n.value}\n                isSelected={n.isSelected}\n                id={n.id}\n                selectNumber= {() => selectNumber(n.id, n.value)}\n                />)\n    })\n\n    const grid = data.map(sudoku => {\n        return(\n            sudoku.schema.map(row =>{\n                return(\n                    row.row.map(tile =>{\n                        return(<Tile number={tile.n} r={sudoku.schema.indexOf(row)} c={row.row.indexOf(tile)}/>)\n                    })\n                )\n            })\n        )\n    })\n        function allNumbers() {\n            const numbers = []\n            for (let i = 1; i < 10; i++) {\n                numbers.push(createNumber(i))\n            }\n            console.log(numbers)\n            return numbers\n        }\n\n        function createNumber(i) {\n            return {\n                value: i,\n                isSelected: false,\n                id: nanoid()\n                }\n            }\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {grid}\n            </div>\n            <div className= \"num-grid\">\n                {numberGrid}\n            </div>\n            <h2>{selectedNum}</h2>\n        </main>\n    )\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/priscilla/Desktop/React/Sudoku/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Tile from './Tile';\nimport { nanoid } from \"nanoid\";\nimport Confetti from \"react-confetti\";\nimport Number from './Number';\nimport { generateSudokuGrid, allNumbers } from './SudokuApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Game() {\n  _s();\n\n  const [sudoku, setSudoku] = React.useState(generateSudokuGrid());\n  const numbers = allNumbers();\n  const [selectNum, setSelectNum] = React.useState();\n  const [notesMode, setNotesMode] = React.useState(false);\n  const sudokuGrid = sudoku.map(s => {\n    return /*#__PURE__*/_jsxDEV(Tile, {\n      id: s.id,\n      number: s.number,\n      r: s.r,\n      c: s.c,\n      isNotInitValue: s.isNotInitValue,\n      fillTile: () => fillTile(s.id),\n      notesMode: s.notesMode,\n      note: s.note\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  });\n  const rowNumber = numbers.map(n => {\n    return /*#__PURE__*/_jsxDEV(Number, {\n      number: n.value,\n      id: n.id,\n      count: n.count,\n      selectNumber: () => setSelectNum(n.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 16\n    }, this);\n  });\n\n  function fillTile(id) {\n    setSudoku(oldSudoku => oldSudoku.map(s => {\n      return s.id === id && s.isNotInitValue ? { ...s,\n        number: selectNum,\n        notesMode: notesMode,\n        note: [...s.note, selectNum]\n      } : s;\n    }));\n  }\n\n  function addNotes() {\n    setNotesMode(old => !old);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sudoku-grid\",\n      children: sudokuGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"num-grid\",\n      children: rowNumber\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addNotes,\n      children: notesMode ? \"notes\" : \"write\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"6WatJStspveCQgNDyCQIN9LtH9w=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/priscilla/Desktop/React/Sudoku/src/components/Game.js"],"names":["React","Tile","nanoid","Confetti","Number","generateSudokuGrid","allNumbers","Game","sudoku","setSudoku","useState","numbers","selectNum","setSelectNum","notesMode","setNotesMode","sudokuGrid","map","s","id","number","r","c","isNotInitValue","fillTile","note","rowNumber","n","value","count","oldSudoku","addNotes","old"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,kBAAR,EAA4BC,UAA5B,QAA6C,aAA7C;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,KAAK,CAACU,QAAN,CAAeL,kBAAkB,EAAjC,CAA5B;AACA,QAAMM,OAAO,GAAGL,UAAU,EAA1B;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bb,KAAK,CAACU,QAAN,EAAlC;AACA,QAAM,CAACI,SAAD,EAAYC,YAAZ,IAA4Bf,KAAK,CAACU,QAAN,CAAe,KAAf,CAAlC;AAEA,QAAMM,UAAU,GAAGR,MAAM,CAACS,GAAP,CAAWC,CAAC,IAAG;AAC9B,wBACI,QAAC,IAAD;AACI,MAAA,EAAE,EAAEA,CAAC,CAACC,EADV;AAEI,MAAA,MAAM,EAAID,CAAC,CAACE,MAFhB;AAGI,MAAA,CAAC,EAAIF,CAAC,CAACG,CAHX;AAII,MAAA,CAAC,EAAIH,CAAC,CAACI,CAJX;AAKI,MAAA,cAAc,EAAEJ,CAAC,CAACK,cALtB;AAMI,MAAA,QAAQ,EAAI,MAAMC,QAAQ,CAACN,CAAC,CAACC,EAAH,CAN9B;AAOI,MAAA,SAAS,EAAID,CAAC,CAACJ,SAPnB;AAQI,MAAA,IAAI,EAAII,CAAC,CAACO;AARd;AAAA;AAAA;AAAA;AAAA,YADJ;AAWC,GAZc,CAAnB;AAaA,QAAMC,SAAS,GAAGf,OAAO,CAACM,GAAR,CAAYU,CAAC,IAAI;AAC/B,wBAAO,QAAC,MAAD;AACC,MAAA,MAAM,EAAEA,CAAC,CAACC,KADX;AAEC,MAAA,EAAE,EAAED,CAAC,CAACR,EAFP;AAGC,MAAA,KAAK,EAAEQ,CAAC,CAACE,KAHV;AAIC,MAAA,YAAY,EAAG,MAAMhB,YAAY,CAACc,CAAC,CAACC,KAAH;AAJlC;AAAA;AAAA;AAAA;AAAA,YAAP;AAMH,GAPiB,CAAlB;;AAQA,WAASJ,QAAT,CAAkBL,EAAlB,EAAqB;AACjBV,IAAAA,SAAS,CAACqB,SAAS,IAAIA,SAAS,CAACb,GAAV,CAAcC,CAAC,IAAI;AACtC,aAAQA,CAAC,CAACC,EAAF,KAASA,EAAT,IAAeD,CAAC,CAACK,cAAlB,GACH,EAAC,GAAGL,CAAJ;AAAOE,QAAAA,MAAM,EAAER,SAAf;AAA2BE,QAAAA,SAAS,EAAEA,SAAtC;AAAiDW,QAAAA,IAAI,EAAG,CAAC,GAAGP,CAAC,CAACO,IAAN,EAAYb,SAAZ;AAAxD,OADG,GACgFM,CADvF;AAEH,KAHsB,CAAd,CAAT;AAIH;;AAED,WAASa,QAAT,GAAmB;AACfhB,IAAAA,YAAY,CAACiB,GAAG,IAAI,CAACA,GAAT,CAAZ;AACH;;AAED,sBACI;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE,aAAhB;AAAA,gBACKhB;AADL;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAE,UAAhB;AAAA,gBACKU;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ,eAOI;AAAQ,MAAA,OAAO,EAAEK,QAAjB;AAAA,gBAA6BjB,SAAS,GAAG,OAAH,GAAa;AAAnD;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GAjDuBP,I;;KAAAA,I","sourcesContent":["import React from 'react';\nimport Tile from './Tile';\nimport {nanoid} from \"nanoid\"\nimport Confetti from \"react-confetti\"\nimport Number from './Number'\nimport {generateSudokuGrid, allNumbers} from './SudokuApi'\n\nexport default function Game() {\n    const [sudoku, setSudoku] = React.useState(generateSudokuGrid())\n    const numbers = allNumbers()\n    const [selectNum, setSelectNum] = React.useState()\n    const [notesMode, setNotesMode] = React.useState(false)\n    \n    const sudokuGrid = sudoku.map(s =>{\n        return(\n            <Tile\n                id={s.id}\n                number = {s.number}\n                r = {s.r}\n                c = {s.c}\n                isNotInitValue={s.isNotInitValue}\n                fillTile = {() => fillTile(s.id)}\n                notesMode = {s.notesMode}\n                note = {s.note}\n            />)\n        })\n    const rowNumber = numbers.map(n => {\n        return(<Number\n                number={n.value}\n                id={n.id}\n                count={n.count}\n                selectNumber= {() => setSelectNum(n.value)}\n                />)\n    })\n    function fillTile(id){\n        setSudoku(oldSudoku => oldSudoku.map(s => {\n            return (s.id === id && s.isNotInitValue) ?\n                {...s, number: selectNum,  notesMode: notesMode, note : [...s.note, selectNum] } : s\n        }))\n    }\n    \n    function addNotes(){\n        setNotesMode(old => !old)\n    }\n\n    return (\n        <main>\n            <div className= \"sudoku-grid\">\n                {sudokuGrid}\n            </div>\n            <div className= \"num-grid\">\n                {rowNumber}\n            </div>\n            <button onClick={addNotes} >{notesMode ? \"notes\" : \"write\"}</button>\n        </main>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}